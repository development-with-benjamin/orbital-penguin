{"version":3,"sources":["../../src/deck-utils.js"],"names":["getDeckInstance","map","gl","deck","__deck","customRender","props","_customRender","deckProps","useDevicePixels","triggerRepaint","parameters","depthMask","depthTest","blendFunc","blendEquation","userData","isExternal","mapboxLayers","Set","setProps","Object","assign","width","height","touchAction","viewState","getViewState","Deck","on","onMapMove","finalize","mapboxVersion","getMapboxVersion","layerManager","afterRender","addLayer","layer","add","updateLayers","removeLayer","updateLayer","drawLayer","currentViewport","getViewport","_drawLayers","viewports","layers","getLayers","deckLayer","shouldDrawLayer","id","clearCanvas","getCenter","lng","lat","longitude","latitude","zoom","getZoom","bearing","getBearing","pitch","getPitch","major","minor","version","split","slice","Number","useMapboxProjection","WebMercatorViewport","x","y","repeat","nearZMultiplier","mapboxLayerIds","Array","from","length","needsRedraw","clearRedrawFlags","layerFilter","filter","layerInstance","parent","forEach","LayerType","type","push"],"mappings":"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","sourcesContent":["import {Deck, WebMercatorViewport} from '@deck.gl/core';\n\nexport function getDeckInstance({map, gl, deck}) {\n  // Only create one deck instance per context\n  if (map.__deck) {\n    return map.__deck;\n  }\n\n  const customRender = deck && deck.props._customRender;\n\n  const deckProps = {\n    useDevicePixels: true,\n    _customRender: () => {\n      map.triggerRepaint();\n      if (customRender) {\n        // customRender may be subscribed by DeckGL React component to update child props\n        // make sure it is still called\n        customRender();\n      }\n    },\n    // TODO: import these defaults from a single source of truth\n    parameters: {\n      depthMask: true,\n      depthTest: true,\n      blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA],\n      blendEquation: gl.FUNC_ADD\n    },\n    userData: {\n      isExternal: false,\n      mapboxLayers: new Set()\n    }\n  };\n\n  if (deck) {\n    deck.setProps(deckProps);\n    deck.props.userData.isExternal = true;\n  } else {\n    // Using external gl context - do not set css size\n    Object.assign(deckProps, {\n      gl,\n      width: false,\n      height: false,\n      touchAction: 'unset',\n      viewState: getViewState(map)\n    });\n    deck = new Deck(deckProps);\n\n    // If deck is externally provided (React use case), we use deck's viewState to\n    // drive the map.\n    // Otherwise (pure JS use case), we use the map's viewState to drive deck.\n    map.on('move', () => onMapMove(deck, map));\n    map.on('remove', () => {\n      deck.finalize();\n      map.__deck = null;\n    });\n  }\n  deck.props.userData.mapboxVersion = getMapboxVersion(map);\n  map.__deck = deck;\n  map.on('render', () => {\n    if (deck.layerManager) afterRender(deck, map);\n  });\n\n  return deck;\n}\n\nexport function addLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.add(layer);\n  updateLayers(deck);\n}\n\nexport function removeLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.delete(layer);\n  updateLayers(deck);\n}\n\nexport function updateLayer(deck, layer) {\n  updateLayers(deck);\n}\n\nexport function drawLayer(deck, map, layer) {\n  let {currentViewport} = deck.props.userData;\n  if (!currentViewport) {\n    // This is the first layer drawn in this render cycle.\n    // Generate viewport from the current map state.\n    currentViewport = getViewport(deck, map, true);\n    deck.props.userData.currentViewport = currentViewport;\n  }\n  if (!deck.layerManager) {\n    return;\n  }\n  deck._drawLayers('mapbox-repaint', {\n    viewports: [currentViewport],\n    // TODO - accept layerFilter in drawLayers' renderOptions\n    layers: getLayers(deck, deckLayer => shouldDrawLayer(layer.id, deckLayer)),\n    clearCanvas: false\n  });\n}\n\nfunction getViewState(map) {\n  const {lng, lat} = map.getCenter();\n  return {\n    longitude: lng,\n    latitude: lat,\n    zoom: map.getZoom(),\n    bearing: map.getBearing(),\n    pitch: map.getPitch()\n  };\n}\n\nfunction getMapboxVersion(map) {\n  // parse mapbox version string\n  let major = 0;\n  let minor = 0;\n  if (map.version) {\n    [major, minor] = map.version\n      .split('.')\n      .slice(0, 2)\n      .map(Number);\n  }\n  return {major, minor};\n}\n\nfunction getViewport(deck, map, useMapboxProjection = true) {\n  const {mapboxVersion} = deck.props.userData;\n\n  return new WebMercatorViewport(\n    Object.assign(\n      {\n        x: 0,\n        y: 0,\n        width: deck.width,\n        height: deck.height,\n        repeat: true\n      },\n      getViewState(map),\n      useMapboxProjection\n        ? {\n            // match mapbox's projection matrix\n            // A change of near plane was made in 1.3.0\n            // https://github.com/mapbox/mapbox-gl-js/pull/8502\n            nearZMultiplier:\n              (mapboxVersion.major === 1 && mapboxVersion.minor >= 3) || mapboxVersion.major >= 2\n                ? 0.02\n                : 1 / (deck.height || 1)\n          }\n        : {\n            // use deck.gl's own default\n            nearZMultiplier: 0.1\n          }\n    )\n  );\n}\n\nfunction afterRender(deck, map) {\n  const {mapboxLayers, isExternal} = deck.props.userData;\n\n  if (isExternal) {\n    // Draw non-Mapbox layers\n    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);\n    const layers = getLayers(deck, deckLayer => {\n      for (const id of mapboxLayerIds) {\n        if (shouldDrawLayer(id, deckLayer)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    if (layers.length > 0) {\n      deck._drawLayers('mapbox-repaint', {\n        viewports: [getViewport(deck, map, false)],\n        layers,\n        clearCanvas: false\n      });\n    }\n  }\n\n  // End of render cycle, clear generated viewport\n  deck.props.userData.currentViewport = null;\n}\n\nfunction onMapMove(deck, map) {\n  deck.setProps({\n    viewState: getViewState(map)\n  });\n  // Camera changed, will trigger a map repaint right after this\n  // Clear any change flag triggered by setting viewState so that deck does not request\n  // a second repaint\n  deck.needsRedraw({clearRedrawFlags: true});\n}\n\nfunction getLayers(deck, layerFilter) {\n  const layers = deck.layerManager.getLayers();\n  return layers.filter(layerFilter);\n}\n\nfunction shouldDrawLayer(id, layer) {\n  let layerInstance = layer;\n  while (layerInstance) {\n    if (layerInstance.id === id) {\n      return true;\n    }\n    layerInstance = layerInstance.parent;\n  }\n  return false;\n}\n\nfunction updateLayers(deck) {\n  if (deck.props.userData.isExternal) {\n    return;\n  }\n\n  const layers = [];\n  deck.props.userData.mapboxLayers.forEach(deckLayer => {\n    const LayerType = deckLayer.props.type;\n    const layer = new LayerType(deckLayer.props);\n    layers.push(layer);\n  });\n  deck.setProps({layers});\n}\n"],"file":"deck-utils.js"}