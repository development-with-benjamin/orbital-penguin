{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["validateGeometryAttributes","attributes","useMeshColors","hasColorAttribute","COLOR_0","colors","useColorAttribute","constant","value","Float32Array","log","assert","positions","POSITION","getGeometry","data","Geometry","Error","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_useMeshColors","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","transpileToGLSL100","context","gl","defines","FEATURES","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","vs","fs","modules","project32","phongLighting","picking","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","MATRIX_ATTRIBUTES","setState","emptyTexture","Texture2D","Uint8Array","width","height","oldProps","changeFlags","extensionsChanged","state","model","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","uniforms","viewport","coordinateSystem","draw","Object","assign","composeModelMatrix","flatShading","Model","getShaders","id","geometry","isInstanced","setUniforms","sampler","hasTexture","Layer","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes, useMeshColors) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data, useMeshColors) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh, this.props._useMeshColors),\n        isInstanced: true\n      })\n    );\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(texture) {\n    const {gl} = this.context;\n    const {emptyTexture, model} = this.state;\n\n    if (model) {\n      // props.mesh may not be ready at this time.\n      // The sampler will be set when `getModel` is called\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"],"file":"simple-mesh-layer.js"}