import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import View from './view';
import Viewport from '../viewports/viewport';
import { getMeterZoom } from '@math.gl/web-mercator';
import { Matrix4, _SphericalCoordinates as SphericalCoordinates } from 'math.gl';
import FirstPersonController from '../controllers/first-person-controller';

function getDirectionFromBearingAndPitch(_ref) {
  var bearing = _ref.bearing,
      pitch = _ref.pitch;
  var spherical = new SphericalCoordinates({
    bearing: bearing,
    pitch: pitch
  });
  var direction = spherical.toVector3().normalize();
  return direction;
}

var FirstPersonViewport = function (_Viewport) {
  _inherits(FirstPersonViewport, _Viewport);

  var _super = _createSuper(FirstPersonViewport);

  function FirstPersonViewport(props) {
    _classCallCheck(this, FirstPersonViewport);

    var _props$modelMatrix = props.modelMatrix,
        modelMatrix = _props$modelMatrix === void 0 ? null : _props$modelMatrix,
        _props$bearing = props.bearing,
        bearing = _props$bearing === void 0 ? 0 : _props$bearing,
        _props$pitch = props.pitch,
        pitch = _props$pitch === void 0 ? 0 : _props$pitch,
        _props$up = props.up,
        up = _props$up === void 0 ? [0, 0, 1] : _props$up;
    var dir = getDirectionFromBearingAndPitch({
      bearing: bearing,
      pitch: pitch === -90 ? 0.0001 : 90 + pitch
    });
    var center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;
    var zoom = getMeterZoom(props);
    var scale = Math.pow(2, zoom);
    var viewMatrix = new Matrix4().lookAt({
      eye: [0, 0, 0],
      center: center,
      up: up
    }).scale(scale);
    return _super.call(this, _objectSpread(_objectSpread({}, props), {}, {
      zoom: zoom,
      viewMatrix: viewMatrix
    }));
  }

  return FirstPersonViewport;
}(Viewport);

var FirstPersonView = function (_View) {
  _inherits(FirstPersonView, _View);

  var _super2 = _createSuper(FirstPersonView);

  function FirstPersonView(props) {
    _classCallCheck(this, FirstPersonView);

    return _super2.call(this, Object.assign({}, props, {
      type: FirstPersonViewport
    }));
  }

  _createClass(FirstPersonView, [{
    key: "controller",
    get: function get() {
      return this._getControllerProps({
        type: FirstPersonController
      });
    }
  }]);

  return FirstPersonView;
}(View);

export { FirstPersonView as default };
FirstPersonView.displayName = 'FirstPersonView';
//# sourceMappingURL=first-person-view.js.map