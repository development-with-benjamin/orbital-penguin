{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["clamp","Vector2","Controller","ViewState","LinearInterpolator","TRANSITION_EVENTS","mod","DEFAULT_STATE","orbitAxis","rotationX","rotationOrbit","zoom","target","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","zoom2Scale","Math","pow","OrbitState","makeViewport","width","height","startPanPosition","startTarget","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_state","pos","_viewportProps","_getUpdatedState","startPos","delta","subtract","_calculateNewTarget","pixelOffset","deltaAngleX","deltaAngleY","Number","isFinite","newRotation","deltaScaleX","deltaScaleY","viewState","fromProps","getViewportProps","props","Object","assign","abs","scale","newZoom","_calculateNewZoom","startScale","newScale","dX","dY","speed","log2","viewportProps","viewport","center","project","unproject","newProps","OrbitController"],"mappings":"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","sourcesContent":["import {clamp, Vector2} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\nimport {mod} from '../utils/math-utils';\n\nconst DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n/* Helpers */\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\nexport class OrbitState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    orbitAxis = DEFAULT_STATE.orbitAxis,\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    startTarget,\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      orbitAxis,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._state = {\n      startPanPosition,\n      startTarget,\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {target} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startTarget: target\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const {startPanPosition, startTarget} = this._state;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({startTarget, pixelOffset: delta})\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startTarget: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (\n      !startRotatePos ||\n      !Number.isFinite(startRotationX) ||\n      !Number.isFinite(startRotationOrbit)\n    ) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startTarget: this._viewportProps.target,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, target} = this._viewportProps;\n    let {startZoom, startZoomPosition, startTarget} = this._state;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startTarget = target;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n    const dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      target: this._calculateNewTarget({startTarget, zoom: newZoom, pixelOffset: [dX, dY]})\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startTarget: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed = 50) {\n    const pixelOffset = [-speed, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveRight(speed = 50) {\n    const pixelOffset = [speed, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveUp(speed = 50) {\n    const pixelOffset = [0, -speed];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveDown(speed = 50) {\n    const pixelOffset = [0, speed];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewTarget({startTarget, zoom, pixelOffset}) {\n    const viewportProps = Object.assign({}, this._viewportProps);\n    if (Number.isFinite(zoom)) {\n      viewportProps.zoom = zoom;\n    }\n    if (startTarget) {\n      viewportProps.target = startTarget;\n    }\n    const viewport = this.makeViewport(viewportProps);\n    const center = viewport.project(viewportProps.target);\n    return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._state, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"orbit-controller.js"}