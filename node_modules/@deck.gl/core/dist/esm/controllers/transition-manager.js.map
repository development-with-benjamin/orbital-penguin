{"version":3,"sources":["../../../src/controllers/transition-manager.js"],"names":["Transition","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionEasing","t","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","ControllerState","props","Object","assign","propsInTransition","transition","timeline","onViewStateChange","onStateChange","_onTransitionUpdate","bind","cancel","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","settings","interruption","endProps","startProps","_triggerTransition","update","transitionDuration","transitionInterpolator","Boolean","inProgress","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","startViewstate","endViewStateProps","shortestPathFrom","duration","getDuration","initialProps","initializeProps","start","easing","end","onStart","onUpdate","onInterrupt","_onTransitionEnd","onEnd","inTransition","updateTransition","callback","isZooming","isPanning","isRotating","time","viewport","interpolateProps","getViewportProps","viewState","oldViewState"],"mappings":"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","sourcesContent":["import Transition from '../transitions/transition';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    this.ControllerState = ControllerState;\n    this.props = Object.assign({}, DEFAULT_PROPS, props);\n    this.propsInTransition = null;\n    this.transition = new Transition(props.timeline);\n\n    this.onViewStateChange = props.onViewStateChange || noop;\n    this.onStateChange = props.onStateChange || noop;\n\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {\n    this.transition.cancel();\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = Object.assign({}, DEFAULT_PROPS, nextProps);\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const {interruption, endProps} = this.transition.settings;\n      const startProps = Object.assign(\n        {},\n        currentProps,\n        interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? endProps\n          : this.propsInTransition || currentProps\n      );\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.duration = duration;\n    this.transition.start({\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n\n    this.onStateChange({inTransition: true});\n\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {\n      time,\n      settings: {interpolator, startProps, endProps, duration, easing}\n    } = transition;\n    const t = easing(time / duration);\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState(\n      Object.assign({}, this.props, viewport)\n    ).getViewportProps();\n\n    this.onViewStateChange({\n      viewState: this.propsInTransition,\n      oldViewState: this.props\n    });\n  }\n}\n"],"file":"transition-manager.js"}