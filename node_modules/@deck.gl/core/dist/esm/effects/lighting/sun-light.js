import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { DirectionalLight } from './directional-light';
import { getSunlightDirection } from './suncalc';

var SunLight = function (_DirectionalLight) {
  _inherits(SunLight, _DirectionalLight);

  var _super = _createSuper(SunLight);

  function SunLight(_ref) {
    var _this;

    var timestamp = _ref.timestamp,
        others = _objectWithoutProperties(_ref, ["timestamp"]);

    _classCallCheck(this, SunLight);

    _this = _super.call(this, others);
    _this.timestamp = timestamp;
    return _this;
  }

  _createClass(SunLight, [{
    key: "getProjectedLight",
    value: function getProjectedLight(_ref2) {
      var layer = _ref2.layer;
      var viewport = layer.context.viewport;
      var isGlobe = viewport.resolution > 0;

      if (isGlobe) {
        var _getSunlightDirection = getSunlightDirection(this.timestamp, 0, 0),
            _getSunlightDirection2 = _slicedToArray(_getSunlightDirection, 3),
            x = _getSunlightDirection2[0],
            y = _getSunlightDirection2[1],
            z = _getSunlightDirection2[2];

        this.direction = [x, -z, y];
      } else {
        var latitude = viewport.latitude,
            longitude = viewport.longitude;
        this.direction = getSunlightDirection(this.timestamp, latitude, longitude);
      }

      return this;
    }
  }]);

  return SunLight;
}(DirectionalLight);

export { SunLight as default };
//# sourceMappingURL=sun-light.js.map