import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import View from './view';
import Viewport from '../viewports/viewport';
import { getMeterZoom } from '@math.gl/web-mercator';
import { Matrix4, _SphericalCoordinates as SphericalCoordinates } from 'math.gl';
import FirstPersonController from '../controllers/first-person-controller';

function getDirectionFromBearingAndPitch({
  bearing,
  pitch
}) {
  const spherical = new SphericalCoordinates({
    bearing,
    pitch
  });
  const direction = spherical.toVector3().normalize();
  return direction;
}

class FirstPersonViewport extends Viewport {
  constructor(props) {
    const {
      modelMatrix = null,
      bearing = 0,
      pitch = 0,
      up = [0, 0, 1]
    } = props;
    const dir = getDirectionFromBearingAndPitch({
      bearing,
      pitch: pitch === -90 ? 0.0001 : 90 + pitch
    });
    const center = modelMatrix ? modelMatrix.transformDirection(dir) : dir;
    const zoom = getMeterZoom(props);
    const scale = Math.pow(2, zoom);
    const viewMatrix = new Matrix4().lookAt({
      eye: [0, 0, 0],
      center,
      up
    }).scale(scale);
    super(_objectSpread(_objectSpread({}, props), {}, {
      zoom,
      viewMatrix
    }));
  }

}

export default class FirstPersonView extends View {
  constructor(props) {
    super(Object.assign({}, props, {
      type: FirstPersonViewport
    }));
  }

  get controller() {
    return this._getControllerProps({
      type: FirstPersonController
    });
  }

}
FirstPersonView.displayName = 'FirstPersonView';
//# sourceMappingURL=first-person-view.js.map