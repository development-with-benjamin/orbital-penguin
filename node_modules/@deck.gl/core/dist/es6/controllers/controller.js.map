{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["TransitionManager","assert","NO_TRANSITION_PROPS","transitionDuration","DEFAULT_INERTIA","INERTIA_EASING","t","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","Controller","constructor","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","_events","_interactionState","isDragging","_customEvents","handleEvent","setProps","events","customEvents","toggleEvents","finalize","eventName","off","event","makeViewport","_state","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","blockEvents","timeout","timer","setTimeout","props","dragMode","transitionInterpolator","_getTransitionProps","processViewStateChange","inertia","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","updateViewport","newControllerState","extraProps","interactionState","viewState","Object","assign","getViewportProps","changed","getState","oldViewState","params","newStates","alternateMode","rightButton","invertPan","_panMove","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","transitionEasing","rotate","isRotating","rotateEnd","preventDefault","speed","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager from './transition-manager';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, {\n      ...options,\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n    this._events = null;\n    this._interactionState = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    let {inertia} = props;\n    if (inertia === true) {\n      inertia = DEFAULT_INERTIA;\n    }\n    this.inertia = inertia;\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this._state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  _onTransition(params) {\n    if (this.onViewStateChange) {\n      params.interactionState = this._interactionState;\n      this.onViewStateChange(params);\n    }\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia, _lastPinchEvent} = this;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"],"file":"controller.js"}