{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["clamp","Vector2","Controller","ViewState","LinearInterpolator","TRANSITION_EVENTS","mod","DEFAULT_STATE","orbitAxis","rotationX","rotationOrbit","zoom","target","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","zoom2Scale","Math","pow","OrbitState","constructor","makeViewport","width","height","startPanPosition","startTarget","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_state","panStart","pos","_viewportProps","_getUpdatedState","pan","startPos","delta","subtract","_calculateNewTarget","pixelOffset","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","Number","isFinite","newRotation","deltaScaleX","deltaScaleY","rotateEnd","shortestPathFrom","viewState","fromProps","getViewportProps","props","Object","assign","abs","zoomStart","scale","newZoom","_calculateNewZoom","startScale","newScale","dX","dY","zoomEnd","zoomIn","speed","zoomOut","moveLeft","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","log2","viewportProps","viewport","center","project","unproject","newProps","_applyConstraints","OrbitController","_getTransitionProps"],"mappings":"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","sourcesContent":["import {clamp, Vector2} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\nimport {mod} from '../utils/math-utils';\n\nconst DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n/* Helpers */\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\nexport class OrbitState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    orbitAxis = DEFAULT_STATE.orbitAxis,\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    startTarget,\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      orbitAxis,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._state = {\n      startPanPosition,\n      startTarget,\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {target} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startTarget: target\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const {startPanPosition, startTarget} = this._state;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({startTarget, pixelOffset: delta})\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startTarget: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (\n      !startRotatePos ||\n      !Number.isFinite(startRotationX) ||\n      !Number.isFinite(startRotationOrbit)\n    ) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startTarget: this._viewportProps.target,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, target} = this._viewportProps;\n    let {startZoom, startZoomPosition, startTarget} = this._state;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startTarget = target;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n    const dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      target: this._calculateNewTarget({startTarget, zoom: newZoom, pixelOffset: [dX, dY]})\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startTarget: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed = 50) {\n    const pixelOffset = [-speed, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveRight(speed = 50) {\n    const pixelOffset = [speed, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveUp(speed = 50) {\n    const pixelOffset = [0, -speed];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveDown(speed = 50) {\n    const pixelOffset = [0, speed];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewTarget({startTarget, zoom, pixelOffset}) {\n    const viewportProps = Object.assign({}, this._viewportProps);\n    if (Number.isFinite(zoom)) {\n      viewportProps.zoom = zoom;\n    }\n    if (startTarget) {\n      viewportProps.target = startTarget;\n    }\n    const viewport = this.makeViewport(viewportProps);\n    const center = viewport.project(viewportProps.target);\n    return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._state, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"orbit-controller.js"}