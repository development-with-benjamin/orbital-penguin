{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["clamp","Controller","ViewState","normalizeViewportProps","assert","LinearInterpolator","TRANSITION_EVENTS","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","DEFAULT_STATE","pitch","bearing","altitude","minZoom","maxZoom","minPitch","maxPitch","MapState","constructor","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","Number","isFinite","_state","panStart","pos","_getUpdatedState","_unproject","pan","startPos","_calculateNewLngLat","panEnd","rotateStart","_viewportProps","rotate","deltaAngleX","deltaAngleY","newRotation","_calculateNewPitchAndBearing","_getRotationParams","rotateEnd","zoomStart","scale","_calculateNewZoom","zoomedViewport","getMapCenterByLngLatPosition","lngLat","zoomEnd","zoomIn","speed","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","viewState","fromProps","getViewportProps","props","Object","assign","Math","abs","offset","newProps","_applyConstraints","viewport","unproject","log2","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY","min","max","MapController","dragMode","_getTransitionProps","opts","controllerState"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = DEFAULT_STATE.maxZoom,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Pointer position when rotation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  _getTransitionProps(opts) {\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n          ...LINEAR_TRANSITION_PROPS,\n          transitionInterpolator: new LinearInterpolator({\n            ...opts,\n            makeViewport: this.controllerState.makeViewport\n          })\n        }\n      : LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"map-controller.js"}