{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","LinearInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","FirstPersonState","width","height","longitude","latitude","startRotatePos","startBearing","startPitch","startZoomPosition","startZoom","_state","use2D","spherical","SphericalCoordinates","_viewportProps","direction","toVector3","normalize","pos","_getUpdatedState","deltaAngleX","deltaAngleY","Number","isFinite","newRotation","deltaScaleX","deltaScaleY","zoom","scale","getDirection","_move","Math","log2","speed","rotateZ","radians","PI","negate","viewState","fromProps","getViewportProps","props","Object","assign","abs","fromPosition","delta","Vector3","add","newProps","ViewState","FirstPersonController","Controller"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAEA,IAAMA,cAAc,GAAG,EAAvB;AACA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADU;AAEpBC,EAAAA,KAAK,EAAE,CAFa;AAGpBC,EAAAA,OAAO,EAAE,CAHW;AAIpBC,EAAAA,QAAQ,EAAE,EAJU;AAKpBC,EAAAA,QAAQ,EAAE,CAAC;AALS,CAAtB;AAQA,IAAMC,uBAAuB,GAAG;AAC9BC,EAAAA,kBAAkB,EAAE,GADU;AAE9BC,EAAAA,gBAAgB,EAAE,0BAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAFW;AAG9BC,EAAAA,sBAAsB,EAAE,IAAIC,8BAAJ,CAAuB,CAAC,UAAD,EAAa,OAAb,EAAsB,SAAtB,CAAvB,CAHM;AAI9BC,EAAAA,sBAAsB,EAAEC,qCAAkBC;AAJZ,CAAhC;;IAOMC,gB;;;;;AACJ,kCAwBG;AAAA;;AAAA,QAtBDC,KAsBC,QAtBDA,KAsBC;AAAA,QArBDC,MAqBC,QArBDA,MAqBC;AAAA,6BAlBDhB,QAkBC;AAAA,QAlBDA,QAkBC,8BAlBUD,aAAa,CAACC,QAkBxB;AAAA,4BAhBDE,OAgBC;AAAA,QAhBDA,OAgBC,6BAhBSH,aAAa,CAACG,OAgBvB;AAAA,0BAfDD,KAeC;AAAA,QAfDA,KAeC,2BAfOF,aAAa,CAACE,KAerB;AAAA,QAZDgB,SAYC,QAZDA,SAYC;AAAA,QAXDC,QAWC,QAXDA,QAWC;AAAA,6BATDf,QASC;AAAA,QATDA,QASC,8BATUJ,aAAa,CAACI,QASxB;AAAA,6BARDC,QAQC;AAAA,QARDA,QAQC,8BARUL,aAAa,CAACK,QAQxB;AAAA,QALDe,cAKC,QALDA,cAKC;AAAA,QAJDC,YAIC,QAJDA,YAIC;AAAA,QAHDC,UAGC,QAHDA,UAGC;AAAA,QAFDC,iBAEC,QAFDA,iBAEC;AAAA,QADDC,SACC,QADDA,SACC;AAAA;AACD,8BAAM;AACJR,MAAAA,KAAK,EAALA,KADI;AAEJC,MAAAA,MAAM,EAANA,MAFI;AAGJhB,MAAAA,QAAQ,EAARA,QAHI;AAIJE,MAAAA,OAAO,EAAPA,OAJI;AAKJD,MAAAA,KAAK,EAALA,KALI;AAMJgB,MAAAA,SAAS,EAATA,SANI;AAOJC,MAAAA,QAAQ,EAARA,QAPI;AAQJf,MAAAA,QAAQ,EAARA,QARI;AASJC,MAAAA,QAAQ,EAARA;AATI,KAAN;AAYA,UAAKoB,MAAL,GAAc;AACZL,MAAAA,cAAc,EAAdA,cADY;AAEZC,MAAAA,YAAY,EAAZA,YAFY;AAGZC,MAAAA,UAAU,EAAVA,UAHY;AAIZC,MAAAA,iBAAiB,EAAjBA,iBAJY;AAKZC,MAAAA,SAAS,EAATA;AALY,KAAd;AAbC;AAoBF;;;;mCAI2B;AAAA,UAAfE,KAAe,uEAAP,KAAO;AAC1B,UAAMC,SAAS,GAAG,IAAIC,2BAAJ,CAAyB;AACzCzB,QAAAA,OAAO,EAAE,KAAK0B,cAAL,CAAoB1B,OADY;AAEzCD,QAAAA,KAAK,EAAEwB,KAAK,GAAG,EAAH,GAAQ,KAAK,KAAKG,cAAL,CAAoB3B;AAFJ,OAAzB,CAAlB;AAIA,UAAM4B,SAAS,GAAGH,SAAS,CAACI,SAAV,GAAsBC,SAAtB,EAAlB;AACA,aAAOF,SAAP;AACD;;;+BAMU;AACT,aAAO,IAAP;AACD;;;0BAMK;AACJ,aAAO,IAAP;AACD;;;6BAMQ;AACP,aAAO,IAAP;AACD;;;uCAMkB;AAAA,UAANG,GAAM,SAANA,GAAM;AACjB,aAAO,KAAKC,gBAAL,CAAsB;AAC3Bd,QAAAA,cAAc,EAAEa,GADW;AAE3BZ,QAAAA,YAAY,EAAE,KAAKQ,cAAL,CAAoB1B,OAFP;AAG3BmB,QAAAA,UAAU,EAAE,KAAKO,cAAL,CAAoB3B;AAHL,OAAtB,CAAP;AAKD;;;kCAM+C;AAAA,UAAxC+B,GAAwC,SAAxCA,GAAwC;AAAA,oCAAnCE,WAAmC;AAAA,UAAnCA,WAAmC,kCAArB,CAAqB;AAAA,oCAAlBC,WAAkB;AAAA,UAAlBA,WAAkB,kCAAJ,CAAI;AAAA,yBACK,KAAKX,MADV;AAAA,UACvCL,cADuC,gBACvCA,cADuC;AAAA,UACvBC,YADuB,gBACvBA,YADuB;AAAA,UACTC,UADS,gBACTA,UADS;AAAA,iCAEtB,KAAKO,cAFiB;AAAA,UAEvCb,KAFuC,wBAEvCA,KAFuC;AAAA,UAEhCC,MAFgC,wBAEhCA,MAFgC;;AAI9C,UAAI,CAACG,cAAD,IAAmB,CAACiB,MAAM,CAACC,QAAP,CAAgBjB,YAAhB,CAApB,IAAqD,CAACgB,MAAM,CAACC,QAAP,CAAgBhB,UAAhB,CAA1D,EAAuF;AACrF,eAAO,IAAP;AACD;;AAED,UAAIiB,WAAJ;;AACA,UAAIN,GAAJ,EAAS;AACP,YAAMO,WAAW,GAAG,CAACP,GAAG,CAAC,CAAD,CAAH,GAASb,cAAc,CAAC,CAAD,CAAxB,IAA+BJ,KAAnD;AACA,YAAMyB,WAAW,GAAG,CAACR,GAAG,CAAC,CAAD,CAAH,GAASb,cAAc,CAAC,CAAD,CAAxB,IAA+BH,MAAnD;AACAsB,QAAAA,WAAW,GAAG;AACZpC,UAAAA,OAAO,EAAEkB,YAAY,GAAGmB,WAAW,GAAG,GAD1B;AAEZtC,UAAAA,KAAK,EAAEoB,UAAU,GAAGmB,WAAW,GAAG;AAFtB,SAAd;AAID,OAPD,MAOO;AACLF,QAAAA,WAAW,GAAG;AACZpC,UAAAA,OAAO,EAAEkB,YAAY,GAAGc,WADZ;AAEZjC,UAAAA,KAAK,EAAEoB,UAAU,GAAGc;AAFR,SAAd;AAID;;AAED,aAAO,KAAKF,gBAAL,CAAsBK,WAAtB,CAAP;AACD;;;gCAMW;AACV,aAAO,KAAKL,gBAAL,CAAsB;AAC3Bd,QAAAA,cAAc,EAAE,IADW;AAE3BC,QAAAA,YAAY,EAAE,IAFa;AAG3BC,QAAAA,UAAU,EAAE;AAHe,OAAtB,CAAP;AAKD;;;gCAMW;AACV,aAAO,KAAKY,gBAAL,CAAsB;AAC3BX,QAAAA,iBAAiB,EAAE,KAAKM,cAAL,CAAoB5B,QADZ;AAE3BuB,QAAAA,SAAS,EAAE,KAAKK,cAAL,CAAoBa;AAFJ,OAAtB,CAAP;AAID;;;gCAUa;AAAA,UAARC,KAAQ,SAARA,KAAQ;AAAA,UACPpB,iBADO,GACc,KAAKE,MADnB,CACPF,iBADO;;AAEZ,UAAI,CAACA,iBAAL,EAAwB;AACtBA,QAAAA,iBAAiB,GAAG,KAAKM,cAAL,CAAoB5B,QAAxC;AACD;;AAED,UAAM6B,SAAS,GAAG,KAAKc,YAAL,EAAlB;AACA,aAAO,KAAKC,KAAL,CAAWf,SAAX,EAAsBgB,IAAI,CAACC,IAAL,CAAUJ,KAAV,IAAmB5C,cAAzC,EAAyDwB,iBAAzD,CAAP;AACD;;;8BAMS;AACR,aAAO,KAAKW,gBAAL,CAAsB;AAC3BX,QAAAA,iBAAiB,EAAE,IADQ;AAE3BC,QAAAA,SAAS,EAAE;AAFgB,OAAtB,CAAP;AAID;;;+BAEgC;AAAA,UAAxBwB,KAAwB,uEAAhBjD,cAAgB;AAC/B,UAAM+B,SAAS,GAAG,KAAKc,YAAL,CAAkB,IAAlB,CAAlB;AACA,aAAO,KAAKC,KAAL,CAAWf,SAAS,CAACmB,OAAV,CAAkB;AAACC,QAAAA,OAAO,EAAEJ,IAAI,CAACK,EAAL,GAAU;AAApB,OAAlB,CAAX,EAAsDH,KAAtD,CAAP;AACD;;;gCAEiC;AAAA,UAAxBA,KAAwB,uEAAhBjD,cAAgB;AAChC,UAAM+B,SAAS,GAAG,KAAKc,YAAL,CAAkB,IAAlB,CAAlB;AACA,aAAO,KAAKC,KAAL,CAAWf,SAAS,CAACmB,OAAV,CAAkB;AAACC,QAAAA,OAAO,EAAE,CAACJ,IAAI,CAACK,EAAN,GAAW;AAArB,OAAlB,CAAX,EAAuDH,KAAvD,CAAP;AACD;;;6BAG8B;AAAA,UAAxBA,KAAwB,uEAAhBjD,cAAgB;AAC7B,UAAM+B,SAAS,GAAG,KAAKc,YAAL,CAAkB,IAAlB,CAAlB;AACA,aAAO,KAAKC,KAAL,CAAWf,SAAX,EAAsBkB,KAAtB,CAAP;AACD;;;+BAGgC;AAAA,UAAxBA,KAAwB,uEAAhBjD,cAAgB;AAC/B,UAAM+B,SAAS,GAAG,KAAKc,YAAL,CAAkB,IAAlB,CAAlB;AACA,aAAO,KAAKC,KAAL,CAAWf,SAAS,CAACsB,MAAV,EAAX,EAA+BJ,KAA/B,CAAP;AACD;;;iCAEsB;AAAA,UAAZA,KAAY,uEAAJ,EAAI;AACrB,aAAO,KAAKd,gBAAL,CAAsB;AAC3B/B,QAAAA,OAAO,EAAE,KAAK0B,cAAL,CAAoB1B,OAApB,GAA8B6C;AADZ,OAAtB,CAAP;AAGD;;;kCAEuB;AAAA,UAAZA,KAAY,uEAAJ,EAAI;AACtB,aAAO,KAAKd,gBAAL,CAAsB;AAC3B/B,QAAAA,OAAO,EAAE,KAAK0B,cAAL,CAAoB1B,OAApB,GAA8B6C;AADZ,OAAtB,CAAP;AAGD;;;+BAEoB;AAAA,UAAZA,KAAY,uEAAJ,EAAI;AACnB,aAAO,KAAKd,gBAAL,CAAsB;AAC3BhC,QAAAA,KAAK,EAAE,KAAK2B,cAAL,CAAoB3B,KAApB,GAA4B8C;AADR,OAAtB,CAAP;AAGD;;;iCAEsB;AAAA,UAAZA,KAAY,uEAAJ,EAAI;AACrB,aAAO,KAAKd,gBAAL,CAAsB;AAC3BhC,QAAAA,KAAK,EAAE,KAAK2B,cAAL,CAAoB3B,KAApB,GAA4B8C;AADR,OAAtB,CAAP;AAGD;;;6BAEiB;AAAA,UAAXA,KAAW,uEAAH,CAAG;AAChB,aAAO,KAAKN,IAAL,CAAU;AAACC,QAAAA,KAAK,EAAEK;AAAR,OAAV,CAAP;AACD;;;8BAEkB;AAAA,UAAXA,KAAW,uEAAH,CAAG;AACjB,aAAO,KAAKN,IAAL,CAAU;AAACC,QAAAA,KAAK,EAAE,IAAIK;AAAZ,OAAV,CAAP;AACD;;;qCAGgBK,S,EAAW;AAC1B,UAAMC,SAAS,GAAGD,SAAS,CAACE,gBAAV,EAAlB;AACA,UAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK7B,cAAvB,CAAd;AAF0B,UAGnB1B,OAHmB,GAGGqD,KAHH,CAGnBrD,OAHmB;AAAA,UAGVe,SAHU,GAGGsC,KAHH,CAGVtC,SAHU;;AAK1B,UAAI4B,IAAI,CAACa,GAAL,CAASxD,OAAO,GAAGmD,SAAS,CAACnD,OAA7B,IAAwC,GAA5C,EAAiD;AAC/CqD,QAAAA,KAAK,CAACrD,OAAN,GAAgBA,OAAO,GAAG,CAAV,GAAcA,OAAO,GAAG,GAAxB,GAA8BA,OAAO,GAAG,GAAxD;AACD;;AACD,UAAI2C,IAAI,CAACa,GAAL,CAASzC,SAAS,GAAGoC,SAAS,CAACpC,SAA/B,IAA4C,GAAhD,EAAqD;AACnDsC,QAAAA,KAAK,CAACtC,SAAN,GAAkBA,SAAS,GAAG,CAAZ,GAAgBA,SAAS,GAAG,GAA5B,GAAkCA,SAAS,GAAG,GAAhE;AACD;;AACD,aAAOsC,KAAP;AACD;;;0BAGK1B,S,EAAWkB,K,EAAoD;AAAA,UAA7CY,YAA6C,uEAA9B,KAAK/B,cAAL,CAAoB5B,QAAU;AACnE,UAAM4D,KAAK,GAAG/B,SAAS,CAACa,KAAV,CAAgBK,KAAhB,CAAd;AACA,aAAO,KAAKd,gBAAL,CAAsB;AAC3BjC,QAAAA,QAAQ,EAAE,IAAI6D,aAAJ,CAAYF,YAAZ,EAA0BG,GAA1B,CAA8BF,KAA9B;AADiB,OAAtB,CAAP;AAGD;;;qCAEgBG,Q,EAAU;AAEzB,aAAO,IAAIjD,gBAAJ,CAAqB0C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK7B,cAAvB,EAAuC,KAAKJ,MAA5C,EAAoDuC,QAApD,CAArB,CAAP;AACD;;;sCAGiBR,K,EAAO;AAAA,UAEhBtD,KAFgB,GAEiCsD,KAFjC,CAEhBtD,KAFgB;AAAA,UAETE,QAFS,GAEiCoD,KAFjC,CAETpD,QAFS;AAAA,UAECC,QAFD,GAEiCmD,KAFjC,CAECnD,QAFD;AAAA,UAEWa,SAFX,GAEiCsC,KAFjC,CAEWtC,SAFX;AAAA,UAEsBf,OAFtB,GAEiCqD,KAFjC,CAEsBrD,OAFtB;AAGvBqD,MAAAA,KAAK,CAACtD,KAAN,GAAc,iBAAMA,KAAN,EAAaG,QAAb,EAAuBD,QAAvB,CAAd;;AAGA,UAAIc,SAAS,GAAG,CAAC,GAAb,IAAoBA,SAAS,GAAG,GAApC,EAAyC;AACvCsC,QAAAA,KAAK,CAACtC,SAAN,GAAkB,oBAAIA,SAAS,GAAG,GAAhB,EAAqB,GAArB,IAA4B,GAA9C;AACD;;AACD,UAAIf,OAAO,GAAG,CAAC,GAAX,IAAkBA,OAAO,GAAG,GAAhC,EAAqC;AACnCqD,QAAAA,KAAK,CAACrD,OAAN,GAAgB,oBAAIA,OAAO,GAAG,GAAd,EAAmB,GAAnB,IAA0B,GAA1C;AACD;;AAED,aAAOqD,KAAP;AACD;;;EAjR4BS,qB;;IAoRVC,qB;;;;;AACnB,iCAAYV,KAAZ,EAAmB;AAAA;AAAA,8BACXzC,gBADW,EACOyC,KADP;AAElB;;;;0CAEqB;AAEpB,aAAOlD,uBAAP;AACD;;;EARgD6D,sB","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['position', 'pitch', 'bearing']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._state = {\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._state;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed = 2) {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState(Object.assign({}, this._viewportProps, this._state, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"first-person-controller.js"}