{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameters","FEATURES","hasFeatures","AttributeManager","COORDINATE_SYSTEM","log","_mergeShaders","mergeShaders","TriangleLayer","AggregationLayer","defaultColorRange","colorRangeToFlatArray","weights_vs","weights_fs","vs_max","fs_max","RESOLUTION","SIZE_2K","ZOOM_DEBOUNCE","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","aggregation","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","DIMENSIONS","data","props","HeatmapLayer","initializeState","gl","context","setState","supported","error","id","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","state","oldProps","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","dataChanged","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","viewport","weightsScale","domainScale","scale","map","Math","_updateWeightmap","zoom","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","_createTextures","textureSize","format","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","floatTargetSupport","COLOR_ATTACHMENT_RGBA32F","warn","_createWeightsTransform","shaderOptions","shaders","vs","_fs","elementCount","_targetTexture","_targetTextureVarying","_sourceTextures","inTexture","byteLength","updateShaders","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","length","commonBounds","useLayerCoordinateSystem","uniforms","textureWidth","update","getNumInstances","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","bottomLeftCommon","topRightCommon","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice","concat","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures} from '@luma.gl/core';\nimport {\n  AttributeManager,\n  COORDINATE_SYSTEM,\n  log,\n  _mergeShaders as mergeShaders\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500; // milliseconds\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM'\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState(DIMENSIONS);\n    this.setState({supported: true});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (oldProps.colorDomain !== props.colorDomain || changeFlags.viewportChanged) {\n      const {viewport} = this.context;\n      const {weightsScale} = this.state;\n      const domainScale = (viewport ? 1024 / viewport.scale : 1) * weightsScale;\n      const colorDomain = props.colorDomain\n        ? props.colorDomain.map(x => x * domainScale)\n        : DEFAULT_COLOR_DOMAIN;\n      if (colorDomain[1] > 0 && weightsScale < 1) {\n        // Hack - when low precision texture is used, aggregated weights are in the [0, 1]\n        // range. Scale colorDomain to fit.\n        const max = Math.min(colorDomain[1], 1);\n        colorDomain[0] *= max / colorDomain[1];\n        colorDomain[1] = max;\n      }\n      this.setState({colorDomain});\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n  /* eslint-enable max-statements,complexity */\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    /* eslint-disable no-unused-expressions */\n    weightsTransform && weightsTransform.delete();\n    weightsTexture && weightsTexture.delete();\n    maxWeightTransform && maxWeightTransform.delete();\n    maxWeightsTexture && maxWeightsTexture.delete();\n    triPositionBuffer && triPositionBuffer.delete();\n    triTexCoordBuffer && triTexCoordBuffer.delete();\n    colorTexture && colorTexture.delete();\n    updateTimer && clearTimeout(updateTimer);\n    /* eslint-enable no-unused-expressions */\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  _createWeightsTransform(shaderOptions = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    if (weightsTransform) {\n      weightsTransform.delete();\n    }\n    const shaders = mergeShaders(\n      {\n        vs: weights_vs,\n        _fs: weights_fs\n      },\n      shaderOptions\n    );\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n    this._createWeightsTransform();\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      vs: vs_max,\n      _fs: fs_max,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // #5: convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), ZOOM_DEBOUNCE);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"],"file":"heatmap-layer.js"}