{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameters","FEATURES","hasFeatures","AttributeManager","COORDINATE_SYSTEM","log","_mergeShaders","mergeShaders","TriangleLayer","AggregationLayer","defaultColorRange","colorRangeToFlatArray","weights_vs","weights_fs","vs_max","fs_max","RESOLUTION","SIZE_2K","ZOOM_DEBOUNCE","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","aggregation","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","DIMENSIONS","data","props","HeatmapLayer","gl","context","setState","supported","error","id","_setupTextureParams","_setupAttributes","_setupResources","changeFlags","somethingChanged","opts","state","oldProps","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","dataChanged","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","viewport","weightsScale","domainScale","scale","map","Math","_updateWeightmap","zoom","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","weightsTransform","maxWeightTransform","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","textureSize","format","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","floatTargetSupport","COLOR_ATTACHMENT_RGBA32F","warn","shaderOptions","shaders","vs","_fs","elementCount","_targetTexture","_targetTextureVarying","_createTextures","_createWeightsTransform","_sourceTextures","inTexture","byteLength","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","length","commonBounds","useLayerCoordinateSystem","uniforms","textureWidth","update","getNumInstances","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","_updateMaxWeightValue","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","bottomLeftCommon","topRightCommon","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice","concat","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures} from '@luma.gl/core';\nimport {\n  AttributeManager,\n  COORDINATE_SYSTEM,\n  log,\n  _mergeShaders as mergeShaders\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500; // milliseconds\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM'\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState(DIMENSIONS);\n    this.setState({supported: true});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (oldProps.colorDomain !== props.colorDomain || changeFlags.viewportChanged) {\n      const {viewport} = this.context;\n      const {weightsScale} = this.state;\n      const domainScale = (viewport ? 1024 / viewport.scale : 1) * weightsScale;\n      const colorDomain = props.colorDomain\n        ? props.colorDomain.map(x => x * domainScale)\n        : DEFAULT_COLOR_DOMAIN;\n      if (colorDomain[1] > 0 && weightsScale < 1) {\n        // Hack - when low precision texture is used, aggregated weights are in the [0, 1]\n        // range. Scale colorDomain to fit.\n        const max = Math.min(colorDomain[1], 1);\n        colorDomain[0] *= max / colorDomain[1];\n        colorDomain[1] = max;\n      }\n      this.setState({colorDomain});\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n  /* eslint-enable max-statements,complexity */\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    /* eslint-disable no-unused-expressions */\n    weightsTransform && weightsTransform.delete();\n    weightsTexture && weightsTexture.delete();\n    maxWeightTransform && maxWeightTransform.delete();\n    maxWeightsTexture && maxWeightsTexture.delete();\n    triPositionBuffer && triPositionBuffer.delete();\n    triTexCoordBuffer && triTexCoordBuffer.delete();\n    colorTexture && colorTexture.delete();\n    updateTimer && clearTimeout(updateTimer);\n    /* eslint-enable no-unused-expressions */\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  _createWeightsTransform(shaderOptions = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    if (weightsTransform) {\n      weightsTransform.delete();\n    }\n    const shaders = mergeShaders(\n      {\n        vs: weights_vs,\n        _fs: weights_fs\n      },\n      shaderOptions\n    );\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n    this._createWeightsTransform();\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      vs: vs_max,\n      _fs: fs_max,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // #5: convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), ZOOM_DEBOUNCE);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"],"file":"heatmap-layer.js"}