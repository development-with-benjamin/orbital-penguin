{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["Geometry","COORDINATE_SYSTEM","CompositeLayer","PointCloudLayer","ScenegraphLayer","SimpleMeshLayer","log","load","Tileset3D","TILE_TYPE","Tiles3DLoader","SINGLE_DATA","defaultProps","getPointColor","type","value","pointSize","data","loader","onTilesetLoad","tileset3d","compare","onTileLoad","tileHeader","onTileUnload","onTileError","tile","message","url","Tile3DLayer","props","removed","state","layerMap","changeFlags","somethingChanged","oldProps","_loadTileset","viewportChanged","_updateTileset","propsChanged","key","needsUpdate","info","sourceLayer","layerId","id","substr","substring","length","tileId","indexOf","object","tilesetUrl","loadOptions","loaders","Array","isArray","options","preload","preloadOptions","Object","assign","tilesetJson","_onTileLoad","bind","_onTileUnload","onTileLoadFail","setState","setNeedsUpdate","context","timeline","viewport","frameNumber","update","tilesetChanged","oldLayer","content","POINTCLOUD","_makePointCloudLayer","SCENEGRAPH","_make3DModelLayer","MESH","_makeSimpleMeshLayer","Error","attributes","pointCount","constantRGBA","cartographicOrigin","modelMatrix","positions","normals","colors","header","vertexCount","POSITION","NORMAL","COLOR_0","SubLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","METER_OFFSETS","coordinateOrigin","getColor","gltf","instances","_lighting","scenegraph","getTransformMatrix","instance","getPosition","texture","geometry","mesh","drawMode","getMeshGeometry","tiles","map","layerCache","layer","selected","_getSubLayer","visible","clone","filter","Boolean","isLoaded","contentAttributes","Float32Array","texCoords","layerName"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Geometry} from '@luma.gl/core';\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer, SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {log} from '@deck.gl/core';\n\nimport {load} from '@loaders.gl/core';\nimport {Tileset3D, TILE_TYPE} from '@loaders.gl/tiles';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nconst SINGLE_DATA = [0];\n\nconst defaultProps = {\n  getPointColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  pointSize: 1.0,\n\n  data: null,\n  loader: Tiles3DLoader,\n\n  onTilesetLoad: {type: 'function', value: tileset3d => {}, compare: false},\n  onTileLoad: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileUnload: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileError: {type: 'function', value: (tile, message, url) => {}, compare: false}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    // prop verification\n    this.state = {\n      layerMap: {},\n      tileset3d: null\n    };\n  }\n\n  get isLoaded() {\n    const {tileset3d} = this.state;\n    return tileset3d && tileset3d.isLoaded();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {tileset3d} = this.state;\n      this._updateTileset(tileset3d);\n    }\n    if (changeFlags.propsChanged) {\n      const {layerMap} = this.state;\n      for (const key in layerMap) {\n        layerMap[key].needsUpdate = true;\n      }\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    const {layerMap} = this.state;\n    const layerId = sourceLayer && sourceLayer.id;\n    if (layerId) {\n      // layerId: this.id-[scenegraph|pointcloud]-tileId\n      const substr = layerId.substring(this.id.length + 1);\n      const tileId = substr.substring(substr.indexOf('-') + 1);\n      info.object = layerMap[tileId] && layerMap[tileId].tile;\n    }\n\n    return info;\n  }\n\n  async _loadTileset(tilesetUrl) {\n    const {loadOptions} = this.props;\n\n    // TODO: deprecate `loader` in v9.0\n    let loader = this.props.loader || this.props.loaders;\n    if (Array.isArray(loader)) {\n      loader = loader[0];\n    }\n\n    const options = {...loadOptions};\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n      Object.assign(options, preloadOptions);\n    }\n    const tilesetJson = await load(tilesetUrl, loader, options);\n\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileUnload: this._onTileUnload.bind(this),\n      onTileLoadFail: this.props.onTileError,\n      ...options\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    this._updateTileset(tileset3d);\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  _onTileLoad(tileHeader) {\n    this.props.onTileLoad(tileHeader);\n    this._updateTileset(this.state.tileset3d);\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tileHeader) {\n    // Was cleaned up from tileset cache. We no longer need to track it.\n    delete this.state.layerMap[tileHeader.id];\n    this.props.onTileUnload(tileHeader);\n  }\n\n  _updateTileset(tileset3d) {\n    const {timeline, viewport} = this.context;\n    if (!timeline || !viewport || !tileset3d) {\n      return;\n    }\n    const frameNumber = tileset3d.update(viewport);\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n    if (tilesetChanged) {\n      this.setState({frameNumber});\n    }\n  }\n\n  _getSubLayer(tileHeader, oldLayer) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.type) {\n      case TILE_TYPE.POINTCLOUD:\n        return this._makePointCloudLayer(tileHeader, oldLayer);\n      case TILE_TYPE.SCENEGRAPH:\n        return this._make3DModelLayer(tileHeader, oldLayer);\n      case TILE_TYPE.MESH:\n        return this._makeSimpleMeshLayer(tileHeader, oldLayer);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _makePointCloudLayer(tileHeader, oldLayer) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n    const data = (oldLayer && oldLayer.props.data) || {\n      header: {\n        vertexCount: pointCount\n      },\n      attributes: {\n        POSITION: positions,\n        NORMAL: normals,\n        COLOR_0: colors\n      }\n    };\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.id}`,\n        data,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  _make3DModelLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.id}`,\n        data: instances || SINGLE_DATA,\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: [0, 0, 0]\n      }\n    );\n  }\n\n  _makeSimpleMeshLayer(tileHeader, oldLayer) {\n    const content = tileHeader.content;\n    const {attributes, modelMatrix, cartographicOrigin, texture} = content;\n\n    const geometry =\n      (oldLayer && oldLayer.props.mesh) ||\n      new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: getMeshGeometry(attributes)\n      });\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        id: `${this.id}-mesh-${tileHeader.id}`,\n        mesh: geometry,\n        data: SINGLE_DATA,\n        getPosition: [0, 0, 0],\n        getColor: [255, 255, 255],\n        texture,\n        modelMatrix,\n        coordinateOrigin: cartographicOrigin,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS\n      }\n    );\n  }\n\n  renderLayers() {\n    const {tileset3d, layerMap} = this.state;\n    if (!tileset3d) {\n      return null;\n    }\n\n    return tileset3d.tiles\n      .map(tile => {\n        const layerCache = (layerMap[tile.id] = layerMap[tile.id] || {tile});\n        let {layer} = layerCache;\n        if (tile.selected) {\n          // render selected tiles\n          if (!layer) {\n            // create layer\n            layer = this._getSubLayer(tile);\n          } else if (layerCache.needsUpdate) {\n            // props have changed, rerender layer\n            layer = this._getSubLayer(tile, layer);\n            layerCache.needsUpdate = false;\n          } else if (!layer.props.visible) {\n            // update layer visibility\n            // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n            layer = layer.clone({visible: true});\n          }\n        } else if (layer && layer.props.visible) {\n          // hide non-selected tiles\n          // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n          layer = layer.clone({visible: false});\n        }\n        layerCache.layer = layer;\n        return layer;\n      })\n      .filter(Boolean);\n  }\n}\n\nfunction getMeshGeometry(contentAttributes) {\n  const attributes = {};\n  attributes.positions = {\n    ...contentAttributes.positions,\n    value: new Float32Array(contentAttributes.positions.value)\n  };\n  if (contentAttributes.normals) {\n    attributes.normals = contentAttributes.normals;\n  }\n  if (contentAttributes.texCoords) {\n    attributes.texCoords = contentAttributes.texCoords;\n  }\n  return attributes;\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}