import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { Matrix4 } from 'math.gl';
import { MVTLoader } from '@loaders.gl/mvt';
import { binaryToGeoJson } from '@loaders.gl/gis';
import { load } from '@loaders.gl/core';
import { COORDINATE_SYSTEM } from '@deck.gl/core';
import { _binaryToFeature, _findIndexBinary } from '@deck.gl/layers';
import TileLayer from '../tile-layer/tile-layer';
import { getURLFromTemplate, isURLTemplate } from '../tile-layer/utils';
import ClipExtension from './clip-extension';
import { transform } from './coordinate-transform';
var WORLD_SIZE = 512;
var defaultProps = {
  uniqueIdProperty: {
    type: 'string',
    value: ''
  },
  highlightedFeatureId: null,
  loaders: [MVTLoader],
  binary: false
};

function fetchTileJSON(_x) {
  return _fetchTileJSON.apply(this, arguments);
}

function _fetchTileJSON() {
  _fetchTileJSON = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return load(url);

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 6:
            _context2.prev = 6;
            _context2.t0 = _context2["catch"](0);
            throw new Error("An error occurred fetching TileJSON: ".concat(_context2.t0));

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 6]]);
  }));
  return _fetchTileJSON.apply(this, arguments);
}

var MVTLayer = function (_TileLayer) {
  _inherits(MVTLayer, _TileLayer);

  var _super = _createSuper(MVTLayer);

  function MVTLayer() {
    _classCallCheck(this, MVTLayer);

    return _super.apply(this, arguments);
  }

  _createClass(MVTLayer, [{
    key: "initializeState",
    value: function initializeState() {
      _get(_getPrototypeOf(MVTLayer.prototype), "initializeState", this).call(this);

      this.setState({
        data: null,
        tileJSON: null
      });
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var props = _ref.props,
          oldProps = _ref.oldProps,
          context = _ref.context,
          changeFlags = _ref.changeFlags;

      if (changeFlags.dataChanged) {
        this._updateTileData({
          props: props
        });
      }

      if (this.state.data) {
        _get(_getPrototypeOf(MVTLayer.prototype), "updateState", this).call(this, {
          props: props,
          oldProps: oldProps,
          context: context,
          changeFlags: changeFlags
        });

        this._setWGS84PropertyForTiles();
      }
    }
  }, {
    key: "_updateTileData",
    value: function () {
      var _updateTileData2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref2) {
        var props, onDataLoad, data, tileJSON, minZoom, maxZoom;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                props = _ref2.props;
                onDataLoad = this.props.onDataLoad;
                data = props.data;
                tileJSON = null;
                minZoom = props.minZoom, maxZoom = props.maxZoom;

                if (!(typeof data === 'string' && !isURLTemplate(data))) {
                  _context.next = 13;
                  break;
                }

                this.setState({
                  data: null,
                  tileJSON: null
                });
                _context.next = 9;
                return fetchTileJSON(data);

              case 9:
                tileJSON = _context.sent;

                if (onDataLoad) {
                  onDataLoad(tileJSON);
                }

                _context.next = 14;
                break;

              case 13:
                if (data.tilejson) {
                  tileJSON = data;
                }

              case 14:
                if (tileJSON) {
                  data = tileJSON.tiles;

                  if (Number.isFinite(tileJSON.minzoom) && tileJSON.minzoom > minZoom) {
                    minZoom = tileJSON.minzoom;
                  }

                  if (Number.isFinite(tileJSON.maxzoom) && (!Number.isFinite(maxZoom) || tileJSON.maxzoom < maxZoom)) {
                    maxZoom = tileJSON.maxzoom;
                  }
                }

                this.setState({
                  data: data,
                  tileJSON: tileJSON,
                  minZoom: minZoom,
                  maxZoom: maxZoom
                });

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _updateTileData(_x2) {
        return _updateTileData2.apply(this, arguments);
      }

      return _updateTileData;
    }()
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      if (!this.state.data) return null;
      return _get(_getPrototypeOf(MVTLayer.prototype), "renderLayers", this).call(this);
    }
  }, {
    key: "getTileData",
    value: function getTileData(tile) {
      var url = getURLFromTemplate(this.state.data, tile);

      if (!url) {
        return Promise.reject('Invalid URL');
      }

      var options = this.getLoadOptions();
      options = _objectSpread(_objectSpread({}, options), {}, {
        mvt: _objectSpread(_objectSpread({}, options && options.mvt), {}, {
          coordinates: this.context.viewport.resolution ? 'wgs84' : 'local',
          tileIndex: {
            x: tile.x,
            y: tile.y,
            z: tile.z
          }
        }),
        gis: this.props.binary ? {
          format: 'binary'
        } : {}
      });
      return load(url, this.props.loaders[0], options);
    }
  }, {
    key: "renderSubLayers",
    value: function renderSubLayers(props) {
      var tile = props.tile;
      var worldScale = Math.pow(2, tile.z);
      var xScale = WORLD_SIZE / worldScale;
      var yScale = -xScale;
      var xOffset = WORLD_SIZE * tile.x / worldScale;
      var yOffset = WORLD_SIZE * (1 - tile.y / worldScale);
      var modelMatrix = new Matrix4().scale([xScale, yScale, 1]);
      props.autoHighlight = false;

      if (!this.context.viewport.resolution) {
        props.modelMatrix = modelMatrix;
        props.coordinateOrigin = [xOffset, yOffset, 0];
        props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;
        props.extensions = [].concat(_toConsumableArray(props.extensions || []), [new ClipExtension()]);
      }

      return _get(_getPrototypeOf(MVTLayer.prototype), "renderSubLayers", this).call(this, props);
    }
  }, {
    key: "onHover",
    value: function onHover(info, pickingEvent) {
      var _this$props = this.props,
          uniqueIdProperty = _this$props.uniqueIdProperty,
          autoHighlight = _this$props.autoHighlight;

      if (autoHighlight) {
        var hoveredFeatureId = this.state.hoveredFeatureId;
        var hoveredFeature = info.object;
        var newHoveredFeatureId;

        if (hoveredFeature) {
          newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);
        }

        if (hoveredFeatureId !== newHoveredFeatureId && newHoveredFeatureId !== -1) {
          this.setState({
            hoveredFeatureId: newHoveredFeatureId
          });
        }
      }

      return _get(_getPrototypeOf(MVTLayer.prototype), "onHover", this).call(this, info, pickingEvent);
    }
  }, {
    key: "getPickingInfo",
    value: function getPickingInfo(params) {
      var info = _get(_getPrototypeOf(MVTLayer.prototype), "getPickingInfo", this).call(this, params);

      var isWGS84 = this.context.viewport.resolution;

      if (info.object && !isWGS84) {
        info.object = transformTileCoordsToWGS84(info.object, info.tile.bbox, this.context.viewport);
      } else if (this.props.binary && info.index !== -1) {
        var data = params.sourceLayer.props.data;
        info.object = _binaryToFeature(data.points, info.index) || _binaryToFeature(data.lines, info.index) || _binaryToFeature(data.polygons, info.index);
      }

      return info;
    }
  }, {
    key: "getHighlightedObjectIndex",
    value: function getHighlightedObjectIndex(tile) {
      var hoveredFeatureId = this.state.hoveredFeatureId;
      var _this$props2 = this.props,
          uniqueIdProperty = _this$props2.uniqueIdProperty,
          highlightedFeatureId = _this$props2.highlightedFeatureId,
          binary = _this$props2.binary;
      var data = tile.data;
      var isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isFeatureIdDefined(highlightedFeatureId);

      if (!isFeatureIdPresent) {
        return -1;
      }

      var featureIdToHighlight = isFeatureIdDefined(highlightedFeatureId) ? highlightedFeatureId : hoveredFeatureId;

      if (Array.isArray(data)) {
        return data.findIndex(function (feature) {
          return getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;
        });
      } else if (data && binary) {
        var featureIdIndex = _findIndexBinary(data, uniqueIdProperty, featureIdToHighlight);

        var geometries = ['points', 'lines', 'polygons'];

        for (var _i = 0, _geometries = geometries; _i < _geometries.length; _i++) {
          var geometry = _geometries[_i];
          var index = data[geometry] && data[geometry].featureIds.value[featureIdIndex];
          if (index !== undefined) return index;
        }
      }

      return -1;
    }
  }, {
    key: "_pickObjects",
    value: function _pickObjects(maxObjects) {
      var _this$context = this.context,
          deck = _this$context.deck,
          viewport = _this$context.viewport;
      var width = viewport.width;
      var height = viewport.height;
      var x = viewport.x;
      var y = viewport.y;
      var layerIds = [this.id];
      return deck.pickObjects({
        x: x,
        y: y,
        width: width,
        height: height,
        layerIds: layerIds,
        maxObjects: maxObjects
      });
    }
  }, {
    key: "getRenderedFeatures",
    value: function getRenderedFeatures() {
      var maxFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var features = this._pickObjects(maxFeatures);

      var featureCache = new Set();
      var renderedFeatures = [];

      var _iterator = _createForOfIteratorHelper(features),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var f = _step.value;
          var featureId = getFeatureUniqueId(f.object, this.props.uniqueIdProperty);

          if (featureId === -1) {
            renderedFeatures.push(f.object);
          } else if (!featureCache.has(featureId)) {
            featureCache.add(featureId);
            renderedFeatures.push(f.object);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return renderedFeatures;
    }
  }, {
    key: "_setWGS84PropertyForTiles",
    value: function _setWGS84PropertyForTiles() {
      var _this = this;

      var propName = 'dataInWGS84';
      var tileset = this.state.tileset;
      tileset.selectedTiles.forEach(function (tile) {
        if (!tile.hasOwnProperty(propName)) {
          Object.defineProperty(tile, propName, {
            get: function get() {
              if (!tile.content) {
                return null;
              }

              if (_this.props.binary && Array.isArray(tile.content) && !tile.content.length) {
                return [];
              }

              if (tile._contentWGS84 === undefined) {
                var content = _this.props.binary ? binaryToGeoJson(tile.content) : tile.content;
                tile._contentWGS84 = content.map(function (feature) {
                  return transformTileCoordsToWGS84(feature, tile.bbox, _this.context.viewport);
                });
              }

              return tile._contentWGS84;
            }
          });
        }
      });
    }
  }, {
    key: "isLoaded",
    get: function get() {
      return this.state.data && this.state.tileset && _get(_getPrototypeOf(MVTLayer.prototype), "isLoaded", this);
    }
  }]);

  return MVTLayer;
}(TileLayer);

export { MVTLayer as default };

function getFeatureUniqueId(feature, uniqueIdProperty) {
  if (uniqueIdProperty) {
    return feature.properties[uniqueIdProperty];
  }

  if ('id' in feature) {
    return feature.id;
  }

  return -1;
}

function isFeatureIdDefined(value) {
  return value !== undefined && value !== null && value !== '';
}

function transformTileCoordsToWGS84(object, bbox, viewport) {
  var feature = _objectSpread(_objectSpread({}, object), {}, {
    geometry: {
      type: object.geometry.type
    }
  });

  Object.defineProperty(feature.geometry, 'coordinates', {
    get: function get() {
      var wgs84Geom = transform(object.geometry, bbox, viewport);
      return wgs84Geom.coordinates;
    }
  });
  return feature;
}

MVTLayer.layerName = 'MVTLayer';
MVTLayer.defaultProps = defaultProps;
//# sourceMappingURL=mvt-layer.js.map