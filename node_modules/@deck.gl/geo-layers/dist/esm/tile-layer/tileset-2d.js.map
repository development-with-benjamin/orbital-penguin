{"version":3,"sources":["../../../src/tile-layer/tileset-2d.js"],"names":["Tile2DHeader","getTileIndices","tileToBoundingBox","RequestScheduler","Matrix4","TILE_STATE_UNKNOWN","TILE_STATE_VISIBLE","TILE_STATE_PLACEHOLDER","TILE_STATE_HIDDEN","TILE_STATE_SELECTED","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","Tileset2D","opts","_getTileData","getTileData","onTileError","onTileLoad","tile","maxCacheByteSize","_cacheByteSize","byteLength","_resizeCache","onTileUnload","_requestScheduler","maxRequests","throttleRequests","_cache","Map","_tiles","_dirty","_viewport","_selectedTiles","_frameNumber","setOptions","Object","assign","Number","isFinite","maxZoom","_maxZoom","Math","floor","minZoom","_minZoom","ceil","values","isLoading","abort","viewport","zRange","modelMatrix","modelMatrixAsMatrix4","isModelMatrixNew","equals","_modelMatrix","_modelMatrixInverse","clone","invert","tileIndices","modelMatrixInverse","map","index","_getTile","_rebuildTree","changed","updateTileStates","tileSize","extent","x","y","z","bbox","tileIndex","_updateTileStates","selectedTiles","abortCandidates","ongoingRequestCount","isVisible","Boolean","state","isSelected","push","length","shift","parent","children","_getNearestAncestor","refinementStrategy","getPlaceholderInAncestors","needsPlaceholder","getPlaceholderInChildren","maxCacheSize","Infinity","overflown","size","tileId","Array","from","sort","t1","t2","create","get","getTileMetadata","loadData","set","isCancelled","getParentIndex","every","isLoaded","t","max","child"],"mappings":"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","sourcesContent":["import Tile2DHeader from './tile-2d-header';\nimport {getTileIndices, tileToBoundingBox} from './utils';\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {Matrix4} from 'math.gl';\n\nconst TILE_STATE_UNKNOWN = 0;\nconst TILE_STATE_VISIBLE = 1;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\nconst TILE_STATE_PLACEHOLDER = 3;\nconst TILE_STATE_HIDDEN = 4;\n// tiles that should be displayed in the current viewport\nconst TILE_STATE_SELECTED = 5;\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nconst DEFAULT_CACHE_SCALE = 5;\n\n/**\n * Manages loading and purging of tiles data. This class caches recently visited tiles\n * and only create new tiles if they are present.\n */\n\nexport default class Tileset2D {\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts) {\n    this.opts = opts;\n    this._getTileData = opts.getTileData;\n\n    this.onTileError = opts.onTileError;\n    this.onTileLoad = tile => {\n      opts.onTileLoad(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n    this.onTileUnload = opts.onTileUnload;\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: opts.maxRequests > 0\n    });\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles() {\n    return this._selectedTiles;\n  }\n\n  get isLoaded() {\n    return this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  setOptions(opts) {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom);\n    }\n  }\n\n  // Clean up any outstanding tile requests.\n  finalize() {\n    for (const tile of this._cache.values()) {\n      if (tile.isLoading) {\n        tile.abort();\n      }\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and model matrix and triggers callback onUpdate.\n   * @param {*} viewport\n   * @param {*} onUpdate\n   * @param {*} modelMatrix\n   */\n  update(viewport, {zRange, modelMatrix} = {}) {\n    const modelMatrixAsMatrix4 = new Matrix4(modelMatrix);\n    const isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);\n    if (!viewport.equals(this._viewport) || isModelMatrixNew) {\n      if (isModelMatrixNew) {\n        this._modelMatrixInverse = modelMatrix && modelMatrixAsMatrix4.clone().invert();\n        this._modelMatrix = modelMatrix && modelMatrixAsMatrix4;\n      }\n      this._viewport = viewport;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange,\n        modelMatrix: this._modelMatrix,\n        modelMatrixInverse: this._modelMatrixInverse\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n\n    return this._frameNumber;\n  }\n\n  /* Public interface for subclassing */\n\n  // Returns array of {x, y, z}\n  getTileIndices({viewport, maxZoom, minZoom, zRange, modelMatrix, modelMatrixInverse}) {\n    const {tileSize, extent} = this.opts;\n    return getTileIndices({\n      viewport,\n      maxZoom,\n      minZoom,\n      zRange,\n      tileSize,\n      extent,\n      modelMatrix,\n      modelMatrixInverse\n    });\n  }\n\n  // Add custom metadata to tiles\n  getTileMetadata({x, y, z}) {\n    return {bbox: tileToBoundingBox(this._viewport, x, y, z)};\n  }\n\n  // Returns {x, y, z} of the parent tile\n  getParentIndex(tileIndex) {\n    // Perf: mutate the input object to avoid GC\n    tileIndex.x = Math.floor(tileIndex.x / 2);\n    tileIndex.y = Math.floor(tileIndex.y / 2);\n    tileIndex.z -= 1;\n    return tileIndex;\n  }\n\n  // Returns true if any tile's visibility changed\n  updateTileStates() {\n    this._updateTileStates(this.selectedTiles);\n\n    const {maxRequests} = this.opts;\n\n    const abortCandidates = [];\n    let ongoingRequestCount = 0;\n    let changed = false;\n    for (const tile of this._cache.values()) {\n      const isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);\n      if (tile.isVisible !== isVisible) {\n        changed = true;\n        tile.isVisible = isVisible;\n      }\n\n      // isSelected used in request scheduler\n      tile.isSelected = tile.state === TILE_STATE_SELECTED;\n\n      // Keep track of all the ongoing requests\n      if (tile.isLoading) {\n        ongoingRequestCount++;\n        if (!tile.isSelected) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n\n    if (maxRequests > 0) {\n      while (ongoingRequestCount > maxRequests && abortCandidates.length > 0) {\n        // There are too many ongoing requests, so abort some that are unselected\n        const tile = abortCandidates.shift();\n        tile.abort();\n        ongoingRequestCount--;\n      }\n    }\n\n    return changed;\n  }\n\n  /* Private methods */\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // A selected tile is always visible.\n  // Never show two overlapping tiles.\n  // If a selected tile is loading, try showing a cached ancester with the closest z\n  // If a selected tile is loading, and no ancester is shown - try showing cached\n  // descendants with the closest z\n  _updateTileStates(selectedTiles) {\n    const {_cache} = this;\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.state = TILE_STATE_UNKNOWN;\n    }\n\n    // For all the selected && pending tiles:\n    // - pick the closest ancestor as placeholder\n    // - if no ancestor is visible, pick the closest children as placeholder\n    for (const tile of selectedTiles) {\n      tile.state = TILE_STATE_SELECTED;\n    }\n\n    if (refinementStrategy === STRATEGY_NEVER) {\n      return;\n    }\n    for (const tile of selectedTiles) {\n      getPlaceholderInAncestors(tile, refinementStrategy);\n    }\n    for (const tile of selectedTiles) {\n      if (needsPlaceholder(tile)) {\n        getPlaceholderInChildren(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of _cache) {\n        if (!tile.isVisible) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(tileId);\n          this.onTileUnload(tile);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      this._tiles = Array.from(this._cache.values())\n        // sort by zoom level so that smaller tiles are displayed on top\n        .sort((t1, t2) => t1.z - t2.z);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  _getTile({x, y, z}, create) {\n    const tileId = `${x},${y},${z}`;\n    let tile = this._cache.get(tileId);\n\n    if (!tile && create) {\n      tile = new Tile2DHeader({\n        x,\n        y,\n        z,\n        onTileLoad: this.onTileLoad,\n        onTileError: this.onTileError\n      });\n      Object.assign(tile, this.getTileMetadata(tile));\n      tile.loadData(this._getTileData, this._requestScheduler);\n      this._cache.set(tileId, tile);\n      this._dirty = true;\n    } else if (tile && tile.isCancelled && !tile.isLoading) {\n      tile.loadData(this._getTileData, this._requestScheduler);\n    }\n\n    return tile;\n  }\n\n  _getNearestAncestor(x, y, z) {\n    const {_minZoom = 0} = this;\n    let index = {x, y, z};\n\n    while (index.z > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n// A selected tile needs placeholder from its children if\n// - it is not loaded\n// - none of its ancestors is visible and loaded\nfunction needsPlaceholder(tile) {\n  let t = tile;\n  while (t) {\n    if (t.state & (TILE_STATE_VISIBLE === 0)) {\n      return true;\n    }\n    if (t.isLoaded) {\n      return false;\n    }\n    t = t.parent;\n  }\n  return true;\n}\n\nfunction getPlaceholderInAncestors(tile, refinementStrategy) {\n  let parent;\n  let state = TILE_STATE_PLACEHOLDER;\n  while ((parent = tile.parent)) {\n    if (tile.isLoaded) {\n      // If a tile is loaded, mark all its ancestors as hidden\n      state = TILE_STATE_HIDDEN;\n      if (refinementStrategy === STRATEGY_DEFAULT) {\n        return;\n      }\n    }\n    parent.state = Math.max(parent.state, state);\n    tile = parent;\n  }\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    child.state = Math.max(child.state, TILE_STATE_PLACEHOLDER);\n    if (!child.isLoaded) {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"],"file":"tileset-2d.js"}