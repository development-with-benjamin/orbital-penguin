{"version":3,"sources":["../../../src/tile-layer/tile-2d-traversal.js"],"names":["CullingVolume","Plane","AxisAlignedBoundingBox","BoundingSphere","Vector3","osmTile2lngLat","TILE_SIZE","MAX_MAPS","OSMNode","x","y","z","params","viewport","cullingVolume","elevationBounds","minZ","maxZ","offset","project","boundingVolume","getBoundingVolume","isInside","computeVisibility","childVisible","distance","distanceTo","cameraPosition","scale","height","Math","floor","log2","selected","children","child","update","result","push","_children","node","getSelected","zRange","worldOffset","corner0","corner1","center","cornerPos0","cornerPos1","centerPos","R","max","pow","extent","originX","originY","getOSMTileIndices","resolution","projectPosition","planes","Object","values","getFrustumPlanes","map","normal","clone","negate","unitsPerMeter","distanceScales","elevationMin","elevationMax","pitch","root","traversalParams","subViewports","length"],"mappings":";;;;;;;;;AACA,SAAQA,aAAR,EAAuBC,KAAvB,EAA8BC,sBAA9B,EAAsDC,cAAtD,QAA2E,kBAA3E;AACA,SAAQC,OAAR,QAAsB,SAAtB;AACA,SAAQC,cAAR,QAA6B,SAA7B;AAEA,IAAMC,SAAS,GAAG,GAAlB;AAEA,IAAMC,QAAQ,GAAG,CAAjB;;IAEMC,O;AACJ,mBAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AAAA;;AACnB,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACD;;;;2BAiBMC,M,EAAQ;AAAA,UACNC,QADM,GACmED,MADnE,CACNC,QADM;AAAA,UACIC,aADJ,GACmEF,MADnE,CACIE,aADJ;AAAA,UACmBC,eADnB,GACmEH,MADnE,CACmBG,eADnB;AAAA,UACoCC,IADpC,GACmEJ,MADnE,CACoCI,IADpC;AAAA,UAC0CC,IAD1C,GACmEL,MADnE,CAC0CK,IAD1C;AAAA,UACgDC,MADhD,GACmEN,MADnE,CACgDM,MADhD;AAAA,UACwDC,OADxD,GACmEP,MADnE,CACwDO,OADxD;AAEb,UAAMC,cAAc,GAAG,KAAKC,iBAAL,CAAuBN,eAAvB,EAAwCG,MAAxC,EAAgDC,OAAhD,CAAvB;AAGA,UAAMG,QAAQ,GAAGR,aAAa,CAACS,iBAAd,CAAgCH,cAAhC,CAAjB;;AACA,UAAIE,QAAQ,GAAG,CAAf,EAAkB;AAChB,eAAO,KAAP;AACD;;AAGD,UAAI,CAAC,KAAKE,YAAV,EAAwB;AAAA,YACjBb,CADiB,GACZ,IADY,CACjBA,CADiB;;AAEtB,YAAIA,CAAC,GAAGM,IAAJ,IAAYN,CAAC,IAAIK,IAArB,EAA2B;AAGzB,cAAMS,QAAQ,GACXL,cAAc,CAACM,UAAf,CAA0Bb,QAAQ,CAACc,cAAnC,IAAqDd,QAAQ,CAACe,KAA/D,GAAwEf,QAAQ,CAACgB,MADnF;AAEAlB,UAAAA,CAAC,IAAImB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUP,QAAV,CAAX,CAAL;AACD;;AACD,YAAId,CAAC,IAAIM,IAAT,EAAe;AAEb,eAAKgB,QAAL,GAAgB,IAAhB;AACA,iBAAO,IAAP;AACD;AACF;;AAGD,WAAKA,QAAL,GAAgB,KAAhB;AACA,WAAKT,YAAL,GAAoB,IAApB;;AA7Ba,iDA8BO,KAAKU,QA9BZ;AAAA;;AAAA;AA8Bb,4DAAmC;AAAA,cAAxBC,KAAwB;AACjCA,UAAAA,KAAK,CAACC,MAAN,CAAaxB,MAAb;AACD;AAhCY;AAAA;AAAA;AAAA;AAAA;;AAiCb,aAAO,IAAP;AACD;;;kCAEwB;AAAA,UAAbyB,MAAa,uEAAJ,EAAI;;AACvB,UAAI,KAAKJ,QAAT,EAAmB;AACjBI,QAAAA,MAAM,CAACC,IAAP,CAAY,IAAZ;AACD;;AACD,UAAI,KAAKC,SAAT,EAAoB;AAAA,oDACC,KAAKA,SADN;AAAA;;AAAA;AAClB,iEAAmC;AAAA,gBAAxBC,IAAwB;AACjCA,YAAAA,IAAI,CAACC,WAAL,CAAiBJ,MAAjB;AACD;AAHiB;AAAA;AAAA;AAAA;AAAA;AAInB;;AACD,aAAOA,MAAP;AACD;;;sCAEiBK,M,EAAQC,W,EAAaxB,O,EAAS;AAC9C,UAAIA,OAAJ,EAAa;AAEX,YAAMyB,OAAO,GAAGvC,cAAc,CAAC,KAAKI,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,CAA9B;AACA,YAAMkC,OAAO,GAAGxC,cAAc,CAAC,KAAKI,CAAL,GAAS,CAAV,EAAa,KAAKC,CAAL,GAAS,CAAtB,EAAyB,KAAKC,CAA9B,CAA9B;AACA,YAAMmC,MAAM,GAAGzC,cAAc,CAAC,KAAKI,CAAL,GAAS,GAAV,EAAe,KAAKC,CAAL,GAAS,GAAxB,EAA6B,KAAKC,CAAlC,CAA7B;AACAiC,QAAAA,OAAO,CAACjC,CAAR,GAAY+B,MAAM,CAAC,CAAD,CAAlB;AACAG,QAAAA,OAAO,CAAClC,CAAR,GAAY+B,MAAM,CAAC,CAAD,CAAlB;AACAI,QAAAA,MAAM,CAACnC,CAAP,GAAW+B,MAAM,CAAC,CAAD,CAAjB;AAEA,YAAMK,UAAU,GAAG5B,OAAO,CAACyB,OAAD,CAA1B;AACA,YAAMI,UAAU,GAAG7B,OAAO,CAAC0B,OAAD,CAA1B;AACA,YAAMI,SAAS,GAAG,IAAI7C,OAAJ,CAAYe,OAAO,CAAC2B,MAAD,CAAnB,CAAlB;AACA,YAAMI,CAAC,GAAGpB,IAAI,CAACqB,GAAL,CAASF,SAAS,CAACxB,QAAV,CAAmBsB,UAAnB,CAAT,EAAyCE,SAAS,CAACxB,QAAV,CAAmBuB,UAAnB,CAAzC,CAAV;AAEA,eAAO,IAAI7C,cAAJ,CAAmB8C,SAAnB,EAA8BC,CAA9B,CAAP;AACD;;AAGD,UAAMtB,KAAK,GAAGE,IAAI,CAACsB,GAAL,CAAS,CAAT,EAAY,KAAKzC,CAAjB,CAAd;AACA,UAAM0C,MAAM,GAAG/C,SAAS,GAAGsB,KAA3B;AACA,UAAM0B,OAAO,GAAG,KAAK7C,CAAL,GAAS4C,MAAT,GAAkBV,WAAW,GAAGrC,SAAhD;AAEA,UAAMiD,OAAO,GAAGjD,SAAS,GAAG,CAAC,KAAKI,CAAL,GAAS,CAAV,IAAe2C,MAA3C;AAEA,aAAO,IAAInD,sBAAJ,CACL,CAACoD,OAAD,EAAUC,OAAV,EAAmBb,MAAM,CAAC,CAAD,CAAzB,CADK,EAEL,CAACY,OAAO,GAAGD,MAAX,EAAmBE,OAAO,GAAGF,MAA7B,EAAqCX,MAAM,CAAC,CAAD,CAA3C,CAFK,CAAP;AAID;;;wBA5Fc;AACb,UAAI,CAAC,KAAKH,SAAV,EAAqB;AACnB,YAAM9B,CAAC,GAAG,KAAKA,CAAL,GAAS,CAAnB;AACA,YAAMC,CAAC,GAAG,KAAKA,CAAL,GAAS,CAAnB;AACA,YAAMC,CAAC,GAAG,KAAKA,CAAL,GAAS,CAAnB;AACA,aAAK4B,SAAL,GAAiB,CACf,IAAI/B,OAAJ,CAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,CADe,EAEf,IAAIH,OAAJ,CAAYC,CAAZ,EAAeC,CAAC,GAAG,CAAnB,EAAsBC,CAAtB,CAFe,EAGf,IAAIH,OAAJ,CAAYC,CAAC,GAAG,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,CAHe,EAIf,IAAIH,OAAJ,CAAYC,CAAC,GAAG,CAAhB,EAAmBC,CAAC,GAAG,CAAvB,EAA0BC,CAA1B,CAJe,CAAjB;AAMD;;AACD,aAAO,KAAK4B,SAAZ;AACD;;;;;;AAkFH,OAAO,SAASiB,iBAAT,CAA2B3C,QAA3B,EAAqCI,IAArC,EAA2CyB,MAA3C,EAAmD;AACxD,MAAMvB,OAAO,GAAGN,QAAQ,CAAC4C,UAAT,GAAsB5C,QAAQ,CAAC6C,eAA/B,GAAiD,IAAjE;AAGA,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAchD,QAAQ,CAACiD,gBAAT,EAAd,EAA2CC,GAA3C,CACb;AAAA,QAAEC,MAAF,QAAEA,MAAF;AAAA,QAAUvC,QAAV,QAAUA,QAAV;AAAA,WAAwB,IAAIxB,KAAJ,CAAU+D,MAAM,CAACC,KAAP,GAAeC,MAAf,EAAV,EAAmCzC,QAAnC,CAAxB;AAAA,GADa,CAAf;AAGA,MAAMX,aAAa,GAAG,IAAId,aAAJ,CAAkB2D,MAAlB,CAAtB;AAGA,MAAMQ,aAAa,GAAGtD,QAAQ,CAACuD,cAAT,CAAwBD,aAAxB,CAAsC,CAAtC,CAAtB;AACA,MAAME,YAAY,GAAI3B,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,GAAYyB,aAAvB,IAAyC,CAA9D;AACA,MAAMG,YAAY,GAAI5B,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,GAAYyB,aAAvB,IAAyC,CAA9D;AAGA,MAAMnD,IAAI,GAAGH,QAAQ,CAAC0D,KAAT,IAAkB,EAAlB,GAAuBtD,IAAvB,GAA8B,CAA3C;AAEA,MAAMuD,IAAI,GAAG,IAAIhE,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAb;AACA,MAAMiE,eAAe,GAAG;AACtB5D,IAAAA,QAAQ,EAARA,QADsB;AAEtBM,IAAAA,OAAO,EAAPA,OAFsB;AAGtBL,IAAAA,aAAa,EAAbA,aAHsB;AAItBC,IAAAA,eAAe,EAAE,CAACsD,YAAD,EAAeC,YAAf,CAJK;AAKtBtD,IAAAA,IAAI,EAAJA,IALsB;AAMtBC,IAAAA,IAAI,EAAJA,IANsB;AAQtBC,IAAAA,MAAM,EAAE;AARc,GAAxB;AAWAsD,EAAAA,IAAI,CAACpC,MAAL,CAAYqC,eAAZ;;AAEA,MAAI5D,QAAQ,CAAC6D,YAAT,IAAyB7D,QAAQ,CAAC6D,YAAT,CAAsBC,MAAtB,GAA+B,CAA5D,EAA+D;AAE7DF,IAAAA,eAAe,CAACvD,MAAhB,GAAyB,CAAC,CAA1B;;AACA,WAAOsD,IAAI,CAACpC,MAAL,CAAYqC,eAAZ,CAAP,EAAqC;AACnC,UAAI,EAAEA,eAAe,CAACvD,MAAlB,GAA2B,CAACX,QAAhC,EAA0C;AACxC;AACD;AACF;;AACDkE,IAAAA,eAAe,CAACvD,MAAhB,GAAyB,CAAzB;;AACA,WAAOsD,IAAI,CAACpC,MAAL,CAAYqC,eAAZ,CAAP,EAAqC;AACnC,UAAI,EAAEA,eAAe,CAACvD,MAAlB,GAA2BX,QAA/B,EAAyC;AACvC;AACD;AACF;AACF;;AAED,SAAOiE,IAAI,CAAC/B,WAAL,EAAP;AACD","sourcesContent":["/* eslint-disable complexity */\nimport {CullingVolume, Plane, AxisAlignedBoundingBox, BoundingSphere} from '@math.gl/culling';\nimport {Vector3} from 'math.gl';\nimport {osmTile2lngLat} from './utils';\n\nconst TILE_SIZE = 512;\n// number of world copies to check\nconst MAX_MAPS = 3;\n\nclass OSMNode {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  get children() {\n    if (!this._children) {\n      const x = this.x * 2;\n      const y = this.y * 2;\n      const z = this.z + 1;\n      this._children = [\n        new OSMNode(x, y, z),\n        new OSMNode(x, y + 1, z),\n        new OSMNode(x + 1, y, z),\n        new OSMNode(x + 1, y + 1, z)\n      ];\n    }\n    return this._children;\n  }\n\n  update(params) {\n    const {viewport, cullingVolume, elevationBounds, minZ, maxZ, offset, project} = params;\n    const boundingVolume = this.getBoundingVolume(elevationBounds, offset, project);\n\n    // First, check if this tile is visible\n    const isInside = cullingVolume.computeVisibility(boundingVolume);\n    if (isInside < 0) {\n      return false;\n    }\n\n    // Avoid loading overlapping tiles - if a descendant is requested, do not request the ancester\n    if (!this.childVisible) {\n      let {z} = this;\n      if (z < maxZ && z >= minZ) {\n        // Adjust LOD\n        // If the tile is far enough from the camera, accept a lower zoom level\n        const distance =\n          (boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale) / viewport.height;\n        z += Math.floor(Math.log2(distance));\n      }\n      if (z >= maxZ) {\n        // LOD is acceptable\n        this.selected = true;\n        return true;\n      }\n    }\n\n    // LOD is not enough, recursively test child tiles\n    this.selected = false;\n    this.childVisible = true;\n    for (const child of this.children) {\n      child.update(params);\n    }\n    return true;\n  }\n\n  getSelected(result = []) {\n    if (this.selected) {\n      result.push(this);\n    }\n    if (this._children) {\n      for (const node of this._children) {\n        node.getSelected(result);\n      }\n    }\n    return result;\n  }\n\n  getBoundingVolume(zRange, worldOffset, project) {\n    if (project) {\n      // Custom projection\n      const corner0 = osmTile2lngLat(this.x, this.y, this.z);\n      const corner1 = osmTile2lngLat(this.x + 1, this.y + 1, this.z);\n      const center = osmTile2lngLat(this.x + 0.5, this.y + 0.5, this.z);\n      corner0.z = zRange[1];\n      corner1.z = zRange[1];\n      center.z = zRange[0];\n\n      const cornerPos0 = project(corner0);\n      const cornerPos1 = project(corner1);\n      const centerPos = new Vector3(project(center));\n      const R = Math.max(centerPos.distance(cornerPos0), centerPos.distance(cornerPos1));\n\n      return new BoundingSphere(centerPos, R);\n    }\n\n    // Use WebMercator projection\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n    const originX = this.x * extent + worldOffset * TILE_SIZE;\n    // deck's common space is y-flipped\n    const originY = TILE_SIZE - (this.y + 1) * extent;\n\n    return new AxisAlignedBoundingBox(\n      [originX, originY, zRange[0]],\n      [originX + extent, originY + extent, zRange[1]]\n    );\n  }\n}\n\nexport function getOSMTileIndices(viewport, maxZ, zRange) {\n  const project = viewport.resolution ? viewport.projectPosition : null;\n\n  // Get the culling volume of the current camera\n  const planes = Object.values(viewport.getFrustumPlanes()).map(\n    ({normal, distance}) => new Plane(normal.clone().negate(), distance)\n  );\n  const cullingVolume = new CullingVolume(planes);\n\n  // Project zRange from meters to common space\n  const unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  const elevationMin = (zRange && zRange[0] * unitsPerMeter) || 0;\n  const elevationMax = (zRange && zRange[1] * unitsPerMeter) || 0;\n\n  // Always load at the current zoom level if pitch is small\n  const minZ = viewport.pitch <= 60 ? maxZ : 0;\n\n  const root = new OSMNode(0, 0, 0);\n  const traversalParams = {\n    viewport,\n    project,\n    cullingVolume,\n    elevationBounds: [elevationMin, elevationMax],\n    minZ,\n    maxZ,\n    // num. of worlds from the center. For repeated maps\n    offset: 0\n  };\n\n  root.update(traversalParams);\n\n  if (viewport.subViewports && viewport.subViewports.length > 1) {\n    // Check worlds in repeated maps\n    traversalParams.offset = -1;\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n    traversalParams.offset = 1;\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n\n  return root.getSelected();\n}\n"],"file":"tile-2d-traversal.js"}