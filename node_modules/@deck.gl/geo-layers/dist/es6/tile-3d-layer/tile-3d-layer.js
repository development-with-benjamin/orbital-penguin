import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { Geometry } from '@luma.gl/core';
import { COORDINATE_SYSTEM, CompositeLayer } from '@deck.gl/core';
import { PointCloudLayer } from '@deck.gl/layers';
import { ScenegraphLayer, SimpleMeshLayer } from '@deck.gl/mesh-layers';
import { log } from '@deck.gl/core';
import { load } from '@loaders.gl/core';
import { Tileset3D, TILE_TYPE } from '@loaders.gl/tiles';
import { Tiles3DLoader } from '@loaders.gl/3d-tiles';
const SINGLE_DATA = [0];
const defaultProps = {
  getPointColor: {
    type: 'accessor',
    value: [0, 0, 0, 255]
  },
  pointSize: 1.0,
  data: null,
  loader: Tiles3DLoader,
  onTilesetLoad: {
    type: 'function',
    value: tileset3d => {},
    compare: false
  },
  onTileLoad: {
    type: 'function',
    value: tileHeader => {},
    compare: false
  },
  onTileUnload: {
    type: 'function',
    value: tileHeader => {},
    compare: false
  },
  onTileError: {
    type: 'function',
    value: (tile, message, url) => {},
    compare: false
  }
};
export default class Tile3DLayer extends CompositeLayer {
  initializeState() {
    if ('onTileLoadFail' in this.props) {
      log.removed('onTileLoadFail', 'onTileError')();
    }

    this.state = {
      layerMap: {},
      tileset3d: null
    };
  }

  get isLoaded() {
    const {
      tileset3d
    } = this.state;
    return tileset3d && tileset3d.isLoaded();
  }

  shouldUpdateState({
    changeFlags
  }) {
    return changeFlags.somethingChanged;
  }

  updateState({
    props,
    oldProps,
    changeFlags
  }) {
    if (props.data && props.data !== oldProps.data) {
      this._loadTileset(props.data);
    }

    if (changeFlags.viewportChanged) {
      const {
        tileset3d
      } = this.state;

      this._updateTileset(tileset3d);
    }

    if (changeFlags.propsChanged) {
      const {
        layerMap
      } = this.state;

      for (const key in layerMap) {
        layerMap[key].needsUpdate = true;
      }
    }
  }

  getPickingInfo({
    info,
    sourceLayer
  }) {
    const {
      layerMap
    } = this.state;
    const layerId = sourceLayer && sourceLayer.id;

    if (layerId) {
      const substr = layerId.substring(this.id.length + 1);
      const tileId = substr.substring(substr.indexOf('-') + 1);
      info.object = layerMap[tileId] && layerMap[tileId].tile;
    }

    return info;
  }

  async _loadTileset(tilesetUrl) {
    const {
      loadOptions
    } = this.props;
    let loader = this.props.loader || this.props.loaders;

    if (Array.isArray(loader)) {
      loader = loader[0];
    }

    const options = _objectSpread({}, loadOptions);

    if (loader.preload) {
      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);
      Object.assign(options, preloadOptions);
    }

    const tilesetJson = await load(tilesetUrl, loader, options);
    const tileset3d = new Tileset3D(tilesetJson, _objectSpread({
      onTileLoad: this._onTileLoad.bind(this),
      onTileUnload: this._onTileUnload.bind(this),
      onTileLoadFail: this.props.onTileError
    }, options));
    this.setState({
      tileset3d,
      layerMap: {}
    });

    this._updateTileset(tileset3d);

    this.props.onTilesetLoad(tileset3d);
  }

  _onTileLoad(tileHeader) {
    this.props.onTileLoad(tileHeader);

    this._updateTileset(this.state.tileset3d);

    this.setNeedsUpdate();
  }

  _onTileUnload(tileHeader) {
    delete this.state.layerMap[tileHeader.id];
    this.props.onTileUnload(tileHeader);
  }

  _updateTileset(tileset3d) {
    const {
      timeline,
      viewport
    } = this.context;

    if (!timeline || !viewport || !tileset3d) {
      return;
    }

    const frameNumber = tileset3d.update(viewport);
    const tilesetChanged = this.state.frameNumber !== frameNumber;

    if (tilesetChanged) {
      this.setState({
        frameNumber
      });
    }
  }

  _getSubLayer(tileHeader, oldLayer) {
    if (!tileHeader.content) {
      return null;
    }

    switch (tileHeader.type) {
      case TILE_TYPE.POINTCLOUD:
        return this._makePointCloudLayer(tileHeader, oldLayer);

      case TILE_TYPE.SCENEGRAPH:
        return this._make3DModelLayer(tileHeader, oldLayer);

      case TILE_TYPE.MESH:
        return this._makeSimpleMeshLayer(tileHeader, oldLayer);

      default:
        throw new Error("Tile3DLayer: Failed to render layer of type ".concat(tileHeader.content.type));
    }
  }

  _makePointCloudLayer(tileHeader, oldLayer) {
    const {
      attributes,
      pointCount,
      constantRGBA,
      cartographicOrigin,
      modelMatrix
    } = tileHeader.content;
    const {
      positions,
      normals,
      colors
    } = attributes;

    if (!positions) {
      return null;
    }

    const data = oldLayer && oldLayer.props.data || {
      header: {
        vertexCount: pointCount
      },
      attributes: {
        POSITION: positions,
        NORMAL: normals,
        COLOR_0: colors
      }
    };
    const {
      pointSize,
      getPointColor
    } = this.props;
    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);
    return new SubLayerClass({
      pointSize
    }, this.getSubLayerProps({
      id: 'pointcloud'
    }), {
      id: "".concat(this.id, "-pointcloud-").concat(tileHeader.id),
      data,
      coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,
      coordinateOrigin: cartographicOrigin,
      modelMatrix,
      getColor: constantRGBA || getPointColor
    });
  }

  _make3DModelLayer(tileHeader) {
    const {
      gltf,
      instances,
      cartographicOrigin,
      modelMatrix
    } = tileHeader.content;
    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);
    return new SubLayerClass({
      _lighting: 'pbr'
    }, this.getSubLayerProps({
      id: 'scenegraph'
    }), {
      id: "".concat(this.id, "-scenegraph-").concat(tileHeader.id),
      data: instances || SINGLE_DATA,
      scenegraph: gltf,
      coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,
      coordinateOrigin: cartographicOrigin,
      modelMatrix,
      getTransformMatrix: instance => instance.modelMatrix,
      getPosition: [0, 0, 0]
    });
  }

  _makeSimpleMeshLayer(tileHeader, oldLayer) {
    const content = tileHeader.content;
    const {
      attributes,
      modelMatrix,
      cartographicOrigin,
      texture
    } = content;
    const geometry = oldLayer && oldLayer.props.mesh || new Geometry({
      drawMode: 4,
      attributes: getMeshGeometry(attributes)
    });
    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);
    return new SubLayerClass(this.getSubLayerProps({
      id: 'mesh'
    }), {
      id: "".concat(this.id, "-mesh-").concat(tileHeader.id),
      mesh: geometry,
      data: SINGLE_DATA,
      getPosition: [0, 0, 0],
      getColor: [255, 255, 255],
      texture,
      modelMatrix,
      coordinateOrigin: cartographicOrigin,
      coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS
    });
  }

  renderLayers() {
    const {
      tileset3d,
      layerMap
    } = this.state;

    if (!tileset3d) {
      return null;
    }

    return tileset3d.tiles.map(tile => {
      const layerCache = layerMap[tile.id] = layerMap[tile.id] || {
        tile
      };
      let {
        layer
      } = layerCache;

      if (tile.selected) {
        if (!layer) {
          layer = this._getSubLayer(tile);
        } else if (layerCache.needsUpdate) {
          layer = this._getSubLayer(tile, layer);
          layerCache.needsUpdate = false;
        } else if (!layer.props.visible) {
          layer = layer.clone({
            visible: true
          });
        }
      } else if (layer && layer.props.visible) {
        layer = layer.clone({
          visible: false
        });
      }

      layerCache.layer = layer;
      return layer;
    }).filter(Boolean);
  }

}

function getMeshGeometry(contentAttributes) {
  const attributes = {};
  attributes.positions = _objectSpread(_objectSpread({}, contentAttributes.positions), {}, {
    value: new Float32Array(contentAttributes.positions.value)
  });

  if (contentAttributes.normals) {
    attributes.normals = contentAttributes.normals;
  }

  if (contentAttributes.texCoords) {
    attributes.texCoords = contentAttributes.texCoords;
  }

  return attributes;
}

Tile3DLayer.layerName = 'Tile3DLayer';
Tile3DLayer.defaultProps = defaultProps;
//# sourceMappingURL=tile-3d-layer.js.map