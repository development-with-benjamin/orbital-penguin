{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["Geometry","COORDINATE_SYSTEM","CompositeLayer","PointCloudLayer","ScenegraphLayer","SimpleMeshLayer","log","load","Tileset3D","TILE_TYPE","Tiles3DLoader","SINGLE_DATA","defaultProps","getPointColor","type","value","pointSize","data","loader","onTilesetLoad","tileset3d","compare","onTileLoad","tileHeader","onTileUnload","onTileError","tile","message","url","Tile3DLayer","initializeState","props","removed","state","layerMap","isLoaded","shouldUpdateState","changeFlags","somethingChanged","updateState","oldProps","_loadTileset","viewportChanged","_updateTileset","propsChanged","key","needsUpdate","getPickingInfo","info","sourceLayer","layerId","id","substr","substring","length","tileId","indexOf","object","tilesetUrl","loadOptions","loaders","Array","isArray","options","preload","preloadOptions","Object","assign","tilesetJson","_onTileLoad","bind","_onTileUnload","onTileLoadFail","setState","setNeedsUpdate","timeline","viewport","context","frameNumber","update","tilesetChanged","_getSubLayer","oldLayer","content","POINTCLOUD","_makePointCloudLayer","SCENEGRAPH","_make3DModelLayer","MESH","_makeSimpleMeshLayer","Error","attributes","pointCount","constantRGBA","cartographicOrigin","modelMatrix","positions","normals","colors","header","vertexCount","POSITION","NORMAL","COLOR_0","SubLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","METER_OFFSETS","coordinateOrigin","getColor","gltf","instances","_lighting","scenegraph","getTransformMatrix","instance","getPosition","texture","geometry","mesh","drawMode","getMeshGeometry","renderLayers","tiles","map","layerCache","layer","selected","visible","clone","filter","Boolean","contentAttributes","Float32Array","texCoords","layerName"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Geometry} from '@luma.gl/core';\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer, SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {log} from '@deck.gl/core';\n\nimport {load} from '@loaders.gl/core';\nimport {Tileset3D, TILE_TYPE} from '@loaders.gl/tiles';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nconst SINGLE_DATA = [0];\n\nconst defaultProps = {\n  getPointColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  pointSize: 1.0,\n\n  data: null,\n  loader: Tiles3DLoader,\n\n  onTilesetLoad: {type: 'function', value: tileset3d => {}, compare: false},\n  onTileLoad: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileUnload: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileError: {type: 'function', value: (tile, message, url) => {}, compare: false}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    // prop verification\n    this.state = {\n      layerMap: {},\n      tileset3d: null\n    };\n  }\n\n  get isLoaded() {\n    const {tileset3d} = this.state;\n    return tileset3d && tileset3d.isLoaded();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {tileset3d} = this.state;\n      this._updateTileset(tileset3d);\n    }\n    if (changeFlags.propsChanged) {\n      const {layerMap} = this.state;\n      for (const key in layerMap) {\n        layerMap[key].needsUpdate = true;\n      }\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    const {layerMap} = this.state;\n    const layerId = sourceLayer && sourceLayer.id;\n    if (layerId) {\n      // layerId: this.id-[scenegraph|pointcloud]-tileId\n      const substr = layerId.substring(this.id.length + 1);\n      const tileId = substr.substring(substr.indexOf('-') + 1);\n      info.object = layerMap[tileId] && layerMap[tileId].tile;\n    }\n\n    return info;\n  }\n\n  async _loadTileset(tilesetUrl) {\n    const {loadOptions} = this.props;\n\n    // TODO: deprecate `loader` in v9.0\n    let loader = this.props.loader || this.props.loaders;\n    if (Array.isArray(loader)) {\n      loader = loader[0];\n    }\n\n    const options = {...loadOptions};\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n      Object.assign(options, preloadOptions);\n    }\n    const tilesetJson = await load(tilesetUrl, loader, options);\n\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileUnload: this._onTileUnload.bind(this),\n      onTileLoadFail: this.props.onTileError,\n      ...options\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    this._updateTileset(tileset3d);\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  _onTileLoad(tileHeader) {\n    this.props.onTileLoad(tileHeader);\n    this._updateTileset(this.state.tileset3d);\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tileHeader) {\n    // Was cleaned up from tileset cache. We no longer need to track it.\n    delete this.state.layerMap[tileHeader.id];\n    this.props.onTileUnload(tileHeader);\n  }\n\n  _updateTileset(tileset3d) {\n    const {timeline, viewport} = this.context;\n    if (!timeline || !viewport || !tileset3d) {\n      return;\n    }\n    const frameNumber = tileset3d.update(viewport);\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n    if (tilesetChanged) {\n      this.setState({frameNumber});\n    }\n  }\n\n  _getSubLayer(tileHeader, oldLayer) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.type) {\n      case TILE_TYPE.POINTCLOUD:\n        return this._makePointCloudLayer(tileHeader, oldLayer);\n      case TILE_TYPE.SCENEGRAPH:\n        return this._make3DModelLayer(tileHeader, oldLayer);\n      case TILE_TYPE.MESH:\n        return this._makeSimpleMeshLayer(tileHeader, oldLayer);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _makePointCloudLayer(tileHeader, oldLayer) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n    const data = (oldLayer && oldLayer.props.data) || {\n      header: {\n        vertexCount: pointCount\n      },\n      attributes: {\n        POSITION: positions,\n        NORMAL: normals,\n        COLOR_0: colors\n      }\n    };\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.id}`,\n        data,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  _make3DModelLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.id}`,\n        data: instances || SINGLE_DATA,\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: [0, 0, 0]\n      }\n    );\n  }\n\n  _makeSimpleMeshLayer(tileHeader, oldLayer) {\n    const content = tileHeader.content;\n    const {attributes, modelMatrix, cartographicOrigin, texture} = content;\n\n    const geometry =\n      (oldLayer && oldLayer.props.mesh) ||\n      new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: getMeshGeometry(attributes)\n      });\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        id: `${this.id}-mesh-${tileHeader.id}`,\n        mesh: geometry,\n        data: SINGLE_DATA,\n        getPosition: [0, 0, 0],\n        getColor: [255, 255, 255],\n        texture,\n        modelMatrix,\n        coordinateOrigin: cartographicOrigin,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS\n      }\n    );\n  }\n\n  renderLayers() {\n    const {tileset3d, layerMap} = this.state;\n    if (!tileset3d) {\n      return null;\n    }\n\n    return tileset3d.tiles\n      .map(tile => {\n        const layerCache = (layerMap[tile.id] = layerMap[tile.id] || {tile});\n        let {layer} = layerCache;\n        if (tile.selected) {\n          // render selected tiles\n          if (!layer) {\n            // create layer\n            layer = this._getSubLayer(tile);\n          } else if (layerCache.needsUpdate) {\n            // props have changed, rerender layer\n            layer = this._getSubLayer(tile, layer);\n            layerCache.needsUpdate = false;\n          } else if (!layer.props.visible) {\n            // update layer visibility\n            // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n            layer = layer.clone({visible: true});\n          }\n        } else if (layer && layer.props.visible) {\n          // hide non-selected tiles\n          // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n          layer = layer.clone({visible: false});\n        }\n        layerCache.layer = layer;\n        return layer;\n      })\n      .filter(Boolean);\n  }\n}\n\nfunction getMeshGeometry(contentAttributes) {\n  const attributes = {};\n  attributes.positions = {\n    ...contentAttributes.positions,\n    value: new Float32Array(contentAttributes.positions.value)\n  };\n  if (contentAttributes.normals) {\n    attributes.normals = contentAttributes.normals;\n  }\n  if (contentAttributes.texCoords) {\n    attributes.texCoords = contentAttributes.texCoords;\n  }\n  return attributes;\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}