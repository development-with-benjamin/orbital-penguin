{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","log","ScatterplotLayer","PathLayer","SolidPolygonLayer","replaceInRange","binaryToFeatureForAccesor","getGeojsonFeatures","separateGeojsonFeatures","createLayerPropsFromFeatures","createLayerPropsFromBinary","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusUnits","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getElevation","material","GeoJsonLayer","initializeState","state","layerProps","features","props","getLineDashArray","removed","updateState","changeFlags","dataChanged","data","binary","setState","_updateStateBinary","_updateStateJSON","encodePickingColor","wrapFeature","getSubLayerRow","bind","newFeatures","featuresDiff","Array","isArray","oldFeatures","key","slice","dataRange","partialFeatures","push","getIndex","f","__source","index","replace","renderLayers","transitions","lineDashJustified","updateTriggers","PolygonFillLayer","getSubLayerClass","PolygonStrokeLayer","LineStringsLayer","PointsLayer","polygonFillLayer","shouldRenderSubLayer","polygons","getSubLayerAccessor","getPolygon","geometry","getSubLayerProps","id","lineColors","polygonLineLayer","polygonsOutline","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","lines","pointLayer","points","radiusUnits","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","highlightedObjectIndex","_getHighlightedIndex","isFinite","findIndex","d","accessor","object","info","feature","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport {replaceInRange} from '../utils';\nimport {binaryToFeatureForAccesor} from './geojson-binary';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\nimport {createLayerPropsFromFeatures, createLayerPropsFromBinary} from './geojson-layer-props';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusUnits: 'meters',\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: true\n};\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  _updateStateBinary({props, changeFlags}) {\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  _updateStateJSON({props, changeFlags}) {\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures = {};\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusUnits,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    const {layerProps} = this.state;\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', layerProps.polygons.data) &&\n      new PolygonFillLayer(\n        {\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: this.getSubLayerAccessor(getElevation),\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(\n            extruded && wireframe ? getLineColor : defaultLineColor\n          ),\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        layerProps.polygons\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', layerProps.polygonsOutline.data) &&\n      new PolygonStrokeLayer(\n        {\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        layerProps.polygonsOutline\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', layerProps.lines.data) &&\n      new LineStringsLayer(\n        {\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        layerProps.lines\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', layerProps.points.data) &&\n      new PointsLayer(\n        {\n          stroked,\n          filled,\n          radiusUnits: pointRadiusUnits,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n          getRadius: this.getSubLayerAccessor(getRadius),\n          getLineWidth: this.getSubLayerAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          ...layerProps.points,\n          highlightedObjectIndex: this._getHighlightedIndex(layerProps.points.data)\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  _getHighlightedIndex(data) {\n    const {highlightedObjectIndex} = this.props;\n    const {binary} = this.state;\n\n    if (!binary) {\n      return Number.isFinite(highlightedObjectIndex)\n        ? data.findIndex(d => d.__source.index === highlightedObjectIndex)\n        : null;\n    }\n    return highlightedObjectIndex;\n  }\n\n  getSubLayerAccessor(accessor) {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data, index);\n      return accessor(feature, info);\n    };\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}