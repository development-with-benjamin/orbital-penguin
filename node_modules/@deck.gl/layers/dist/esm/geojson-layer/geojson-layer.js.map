{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","log","ScatterplotLayer","PathLayer","SolidPolygonLayer","replaceInRange","binaryToFeatureForAccesor","getGeojsonFeatures","separateGeojsonFeatures","createLayerPropsFromFeatures","createLayerPropsFromBinary","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusUnits","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getElevation","material","GeoJsonLayer","state","layerProps","features","props","getLineDashArray","removed","changeFlags","dataChanged","data","binary","setState","_updateStateBinary","_updateStateJSON","encodePickingColor","wrapFeature","getSubLayerRow","bind","newFeatures","featuresDiff","Array","isArray","oldFeatures","key","slice","dataRange","partialFeatures","push","getIndex","f","__source","index","replace","transitions","lineDashJustified","updateTriggers","PolygonFillLayer","getSubLayerClass","PolygonStrokeLayer","LineStringsLayer","PointsLayer","polygonFillLayer","shouldRenderSubLayer","polygons","getSubLayerAccessor","getPolygon","geometry","getSubLayerProps","id","lineColors","polygonLineLayer","polygonsOutline","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","lines","pointLayer","points","radiusUnits","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","highlightedObjectIndex","_getHighlightedIndex","isFinite","findIndex","d","accessor","object","info","feature","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport {replaceInRange} from '../utils';\nimport {binaryToFeatureForAccesor} from './geojson-binary';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\nimport {createLayerPropsFromFeatures, createLayerPropsFromBinary} from './geojson-layer-props';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusUnits: 'meters',\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: true\n};\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  _updateStateBinary({props, changeFlags}) {\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  _updateStateJSON({props, changeFlags}) {\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures = {};\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusUnits,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    const {layerProps} = this.state;\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', layerProps.polygons.data) &&\n      new PolygonFillLayer(\n        {\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: this.getSubLayerAccessor(getElevation),\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(\n            extruded && wireframe ? getLineColor : defaultLineColor\n          ),\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        layerProps.polygons\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', layerProps.polygonsOutline.data) &&\n      new PolygonStrokeLayer(\n        {\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        layerProps.polygonsOutline\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', layerProps.lines.data) &&\n      new LineStringsLayer(\n        {\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        layerProps.lines\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', layerProps.points.data) &&\n      new PointsLayer(\n        {\n          stroked,\n          filled,\n          radiusUnits: pointRadiusUnits,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: this.getSubLayerAccessor(getFillColor),\n          getLineColor: this.getSubLayerAccessor(getLineColor),\n          getRadius: this.getSubLayerAccessor(getRadius),\n          getLineWidth: this.getSubLayerAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          ...layerProps.points,\n          highlightedObjectIndex: this._getHighlightedIndex(layerProps.points.data)\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  _getHighlightedIndex(data) {\n    const {highlightedObjectIndex} = this.props;\n    const {binary} = this.state;\n\n    if (!binary) {\n      return Number.isFinite(highlightedObjectIndex)\n        ? data.findIndex(d => d.__source.index === highlightedObjectIndex)\n        : null;\n    }\n    return highlightedObjectIndex;\n  }\n\n  getSubLayerAccessor(accessor) {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data, index);\n      return accessor(feature, info);\n    };\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}