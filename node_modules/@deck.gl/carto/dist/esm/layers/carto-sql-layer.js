import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import CartoLayer from './carto-layer';
import { getMapsVersion } from '../config';
import { getTileJSON, CONNECTIONS, MAP_TYPES } from '../api/maps-api-client';
var defaultProps = {
  bufferSize: 16,
  tileExtent: 4096,
  uniqueIdProperty: 'cartodb_id'
};

var CartoSQLLayer = function (_CartoLayer) {
  _inherits(CartoSQLLayer, _CartoLayer);

  var _super = _createSuper(CartoSQLLayer);

  function CartoSQLLayer() {
    _classCallCheck(this, CartoSQLLayer);

    return _super.apply(this, arguments);
  }

  _createClass(CartoSQLLayer, [{
    key: "updateTileJSON",
    value: function () {
      var _updateTileJSON = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        var _this$props, data, bufferSize, tileExtent, credentials, version, isSQL, sql, mapConfig;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = this.props, data = _this$props.data, bufferSize = _this$props.bufferSize, tileExtent = _this$props.tileExtent, credentials = _this$props.credentials;
                version = getMapsVersion(credentials);
                isSQL = data.search(' ') > -1;
                _context.t0 = version;
                _context.next = _context.t0 === 'v1' ? 6 : _context.t0 === 'v2' ? 11 : 14;
                break;

              case 6:
                sql = isSQL ? data : "SELECT * FROM ".concat(data);
                mapConfig = {
                  version: '1.3.1',
                  buffersize: {
                    mvt: bufferSize
                  },
                  layers: [{
                    type: 'mapnik',
                    options: {
                      sql: sql.trim(),
                      vector_extent: tileExtent
                    }
                  }]
                };
                _context.next = 10;
                return getTileJSON({
                  mapConfig: mapConfig,
                  credentials: credentials
                });

              case 10:
                return _context.abrupt("return", _context.sent);

              case 11:
                _context.next = 13;
                return getTileJSON({
                  connection: CONNECTIONS.CARTO,
                  source: data,
                  type: isSQL ? MAP_TYPES.SQL : MAP_TYPES.TABLE,
                  credentials: credentials
                });

              case 13:
                return _context.abrupt("return", _context.sent);

              case 14:
                throw new Error("Cannot build MapConfig for unmatching version ".concat(version));

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function updateTileJSON() {
        return _updateTileJSON.apply(this, arguments);
      }

      return updateTileJSON;
    }()
  }]);

  return CartoSQLLayer;
}(CartoLayer);

export { CartoSQLLayer as default };
CartoSQLLayer.layerName = 'CartoSQLLayer';
CartoSQLLayer.defaultProps = defaultProps;
//# sourceMappingURL=carto-sql-layer.js.map