import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import * as cartoColors from 'cartocolor';
import { assert } from './utils';
export var DEFAULT_PALETTE = 'PurpOr';
export var NULL_COLOR = [204, 204, 204];
export var OTHERS_COLOR = [119, 119, 119];
export default function getPalette(name, numCategories) {
  var palette = cartoColors[name];
  var paletteIndex = numCategories;
  assert(palette, "Palette \"".concat(name, "\" not found. Expected a CARTOColors string"));
  var palettesColorVariants = Object.keys(palette).filter(function (p) {
    return p !== 'tags';
  }).map(Number);
  var longestPaletteIndex = Math.max.apply(Math, _toConsumableArray(palettesColorVariants));
  var smallestPaletteIndex = Math.min.apply(Math, _toConsumableArray(palettesColorVariants));

  if (!Number.isInteger(numCategories) || numCategories > longestPaletteIndex) {
    paletteIndex = longestPaletteIndex;
  } else if (numCategories < smallestPaletteIndex) {
    paletteIndex = smallestPaletteIndex;
  }

  var colors = palette[paletteIndex];

  if (palette.tags && palette.tags.includes('qualitative')) {
    colors = colors.slice(0, -1);
  }

  return colors.map(function (c) {
    return hexToRgb(c);
  });
}
export function hexToRgb(hex) {
  var result = /^#?([a-f\d]{1})([a-f\d]{1})([a-f\d]{1})$/i.exec(hex);

  if (result) {
    return [parseInt(result[1] + result[1], 16), parseInt(result[2] + result[2], 16), parseInt(result[3] + result[3], 16), 255];
  }

  result = /^#?([a-f\d]{1})([a-f\d]{1})([a-f\d]{1})([a-f\d]{1})$/i.exec(hex);

  if (result) {
    return [parseInt(result[1] + result[1], 16), parseInt(result[2] + result[2], 16), parseInt(result[3] + result[3], 16), parseInt(result[4] + result[4], 16)];
  }

  result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

  if (result) {
    return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16), 255];
  }

  result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

  if (result) {
    return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16), parseInt(result[4], 16)];
  }

  assert(result, "Hexadecimal color \"".concat(hex, "\" was not parsed correctly"));
  return NULL_COLOR;
}
//# sourceMappingURL=palette.js.map