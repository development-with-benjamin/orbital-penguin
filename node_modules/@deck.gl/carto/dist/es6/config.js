import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const defaultCredentials = {
  username: 'public',
  apiKey: 'default_public',
  region: 'us',
  mapsVersion: null,
  sqlUrl: 'https://{user}.carto.com/api/v2/sql',
  mapsUrl: 'https://maps-api-v2.{region}.carto.com/user/{user}'
};
let credentials = defaultCredentials;
export function setDefaultCredentials(opts) {
  credentials = _objectSpread(_objectSpread({}, credentials), opts);
}
export function getDefaultCredentials() {
  return credentials;
}
export function getMapsVersion(creds) {
  const {
    mapsVersion,
    mapsUrl
  } = _objectSpread(_objectSpread({}, credentials), creds);

  if (mapsVersion) {
    return mapsVersion;
  }

  return mapsUrl.includes('api/v1/map') ? 'v1' : 'v2';
}
//# sourceMappingURL=config.js.map