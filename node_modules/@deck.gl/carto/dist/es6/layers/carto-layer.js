import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { CompositeLayer } from '@deck.gl/core';
import { MVTLayer } from '@deck.gl/geo-layers';

const defaultProps = _objectSpread(_objectSpread({}, MVTLayer.defaultProps), {}, {
  data: null,
  credentials: null,
  onDataLoad: {
    type: 'function',
    value: tilejson => {},
    compare: false
  },
  onDataError: {
    type: 'function',
    value: null,
    compare: false,
    optional: true
  }
});

export default class CartoLayer extends CompositeLayer {
  initializeState() {
    this.state = {
      tilejson: null
    };
  }

  get isLoaded() {
    return this.getSubLayers().length > 0 && super.isLoaded;
  }

  updateState({
    changeFlags
  }) {
    const {
      data
    } = this.props;

    if (changeFlags.dataChanged && data) {
      this._updateData();
    }
  }

  async _updateData() {
    try {
      const tilejson = await this.updateTileJSON();
      this.setState({
        tilejson
      });
      this.props.onDataLoad(tilejson);
    } catch (err) {
      if (this.props.onDataError) {
        this.props.onDataError(err);
      } else {
        throw err;
      }
    }
  }

  async updateTileJSON() {
    throw new Error('You must use one of the specific carto layers: BQ or SQL type');
  }

  onHover(info, pickingEvent) {
    const [mvtLayer] = this.getSubLayers();
    return mvtLayer ? mvtLayer.onHover(info, pickingEvent) : super.onHover(info, pickingEvent);
  }

  renderLayers() {
    if (!this.state.tilejson) return null;
    const {
      updateTriggers
    } = this.props;
    return new MVTLayer(this.props, this.getSubLayerProps({
      id: 'mvt',
      data: this.state.tilejson,
      updateTriggers
    }));
  }

}
CartoLayer.layerName = 'CartoLayer';
CartoLayer.defaultProps = defaultProps;
//# sourceMappingURL=carto-layer.js.map