{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["CompositeLayer","MVTLayer","defaultProps","data","credentials","onDataLoad","type","value","tilejson","compare","onDataError","optional","CartoLayer","initializeState","state","isLoaded","getSubLayers","length","updateState","changeFlags","props","dataChanged","_updateData","updateTileJSON","setState","err","Error","onHover","info","pickingEvent","mvtLayer","renderLayers","updateTriggers","getSubLayerProps","id","layerName"],"mappings":";;;;;;AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,SAAQC,QAAR,QAAuB,qBAAvB;;AAEA,MAAMC,YAAY,mCACbD,QAAQ,CAACC,YADI;AAEhBC,EAAAA,IAAI,EAAE,IAFU;AAGhBC,EAAAA,WAAW,EAAE,IAHG;AAIhBC,EAAAA,UAAU,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAEC,QAAQ,IAAI,CAAE,CAAxC;AAA0CC,IAAAA,OAAO,EAAE;AAAnD,GAJI;AAKhBC,EAAAA,WAAW,EAAE;AAACJ,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,IAA1B;AAAgCE,IAAAA,OAAO,EAAE,KAAzC;AAAgDE,IAAAA,QAAQ,EAAE;AAA1D;AALG,EAAlB;;AAQA,eAAe,MAAMC,UAAN,SAAyBZ,cAAzB,CAAwC;AACrDa,EAAAA,eAAe,GAAG;AAChB,SAAKC,KAAL,GAAa;AACXN,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AAED,MAAIO,QAAJ,GAAe;AACb,WAAO,KAAKC,YAAL,GAAoBC,MAApB,GAA6B,CAA7B,IAAkC,MAAMF,QAA/C;AACD;;AAEDG,EAAAA,WAAW,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAgB;AACzB,UAAM;AAAChB,MAAAA;AAAD,QAAS,KAAKiB,KAApB;;AACA,QAAID,WAAW,CAACE,WAAZ,IAA2BlB,IAA/B,EAAqC;AACnC,WAAKmB,WAAL;AACD;AACF;;AAED,QAAMA,WAAN,GAAoB;AAClB,QAAI;AACF,YAAMd,QAAQ,GAAG,MAAM,KAAKe,cAAL,EAAvB;AACA,WAAKC,QAAL,CAAc;AAAChB,QAAAA;AAAD,OAAd;AACA,WAAKY,KAAL,CAAWf,UAAX,CAAsBG,QAAtB;AACD,KAJD,CAIE,OAAOiB,GAAP,EAAY;AACZ,UAAI,KAAKL,KAAL,CAAWV,WAAf,EAA4B;AAC1B,aAAKU,KAAL,CAAWV,WAAX,CAAuBe,GAAvB;AACD,OAFD,MAEO;AACL,cAAMA,GAAN;AACD;AACF;AACF;;AAED,QAAMF,cAAN,GAAuB;AACrB,UAAM,IAAIG,KAAJ,CAAU,+DAAV,CAAN;AACD;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB;AAC1B,UAAM,CAACC,QAAD,IAAa,KAAKd,YAAL,EAAnB;AACA,WAAOc,QAAQ,GAAGA,QAAQ,CAACH,OAAT,CAAiBC,IAAjB,EAAuBC,YAAvB,CAAH,GAA0C,MAAMF,OAAN,CAAcC,IAAd,EAAoBC,YAApB,CAAzD;AACD;;AAEDE,EAAAA,YAAY,GAAG;AACb,QAAI,CAAC,KAAKjB,KAAL,CAAWN,QAAhB,EAA0B,OAAO,IAAP;AAE1B,UAAM;AAACwB,MAAAA;AAAD,QAAmB,KAAKZ,KAA9B;AAEA,WAAO,IAAInB,QAAJ,CACL,KAAKmB,KADA,EAEL,KAAKa,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,EAAE,KADgB;AAEpB/B,MAAAA,IAAI,EAAE,KAAKW,KAAL,CAAWN,QAFG;AAGpBwB,MAAAA;AAHoB,KAAtB,CAFK,CAAP;AAQD;;AAtDoD;AAyDvDpB,UAAU,CAACuB,SAAX,GAAuB,YAAvB;AACAvB,UAAU,CAACV,YAAX,GAA0BA,YAA1B","sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\nconst defaultProps = {\n  ...MVTLayer.defaultProps,\n  data: null,\n  credentials: null,\n  onDataLoad: {type: 'function', value: tilejson => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true}\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tilejson: null\n    };\n  }\n\n  get isLoaded() {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  updateState({changeFlags}) {\n    const {data} = this.props;\n    if (changeFlags.dataChanged && data) {\n      this._updateData();\n    }\n  }\n\n  async _updateData() {\n    try {\n      const tilejson = await this.updateTileJSON();\n      this.setState({tilejson});\n      this.props.onDataLoad(tilejson);\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  async updateTileJSON() {\n    throw new Error('You must use one of the specific carto layers: BQ or SQL type');\n  }\n\n  onHover(info, pickingEvent) {\n    const [mvtLayer] = this.getSubLayers();\n    return mvtLayer ? mvtLayer.onHover(info, pickingEvent) : super.onHover(info, pickingEvent);\n  }\n\n  renderLayers() {\n    if (!this.state.tilejson) return null;\n\n    const {updateTriggers} = this.props;\n\n    return new MVTLayer(\n      this.props,\n      this.getSubLayerProps({\n        id: 'mvt',\n        data: this.state.tilejson,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}