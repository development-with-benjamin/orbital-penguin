{"version":3,"sources":["../../../src/api/maps-api-client.js"],"names":["getDefaultCredentials","getMapsVersion","DEFAULT_USER_COMPONENT_IN_URL","DEFAULT_REGION_COMPONENT_IN_URL","MAP_TYPES","SQL","TABLE","TILESET","CONNECTIONS","BIGQUERY","CARTO","getTileJSON","connection","type","source","mapConfig","credentials","creds","url","buildURL","layergroup","request","metadata","tilejson","vector","Error","response","fetch","headers","Accept","error","json","ok","dealWithError","status","username","apiKey","e","JSON","stringify","errors","encodedApiKey","encodeParameter","encodedClient","parameters","cfg","mapsUrl","join","replace","region","name","value","encodeURIComponent"],"mappings":"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","sourcesContent":["import {getDefaultCredentials, getMapsVersion} from '../config';\n\nconst DEFAULT_USER_COMPONENT_IN_URL = '{user}';\nconst DEFAULT_REGION_COMPONENT_IN_URL = '{region}';\n\nexport const MAP_TYPES = {\n  SQL: 'sql',\n  TABLE: 'table',\n  TILESET: 'tileset'\n};\n\nexport const CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\n\n/**\n * Obtain a TileJson from Maps API v1 and v2\n */\nexport async function getTileJSON({connection, type, source, mapConfig, credentials}) {\n  const creds = {...getDefaultCredentials(), ...credentials};\n  let url;\n\n  switch (getMapsVersion(creds)) {\n    case 'v1':\n      // Maps API v1\n      url = buildURL({mapConfig, credentials: creds});\n      const layergroup = await request({url, credentials: creds});\n      return layergroup.metadata.tilejson.vector;\n\n    case 'v2':\n      // Maps API v2\n      url = buildURL({connection, type, source, credentials: creds});\n      return await request({url, credentials: creds});\n\n    default:\n      throw new Error('Invalid maps API version. It shoud be v1 or v2');\n  }\n}\n\n/**\n * Request against Maps API\n */\nasync function request({url, credentials}) {\n  let response;\n\n  try {\n    /* global fetch */\n    /* eslint no-undef: \"error\" */\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, json, credentials});\n  }\n\n  return json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({response, json, credentials}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${\n          credentials.username\n        }') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${\n          credentials.apiKey\n        }') doesn't provide access to the requested data`\n      );\n\n    default:\n      const e = getMapsVersion() === 'v1' ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction buildURL({connection, type, source, mapConfig, credentials}) {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', `deck-gl-carto`);\n  const parameters = [encodedApiKey, encodedClient];\n\n  if (mapConfig) {\n    const cfg = JSON.stringify(mapConfig);\n    return `${mapsUrl(credentials)}?${parameters.join('&')}&${encodeParameter('config', cfg)}`;\n  }\n  let url = `${mapsUrl(credentials)}/${connection}/${type}?`;\n  url += `${encodeParameter('source', source)}&format=tilejson&${parameters.join('&')}`;\n  return url;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction mapsUrl(credentials) {\n  return credentials.mapsUrl\n    .replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username)\n    .replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\n/**\n * Simple encode parameter\n */\nfunction encodeParameter(name, value) {\n  return `${name}=${encodeURIComponent(value)}`;\n}\n"],"file":"maps-api-client.js"}