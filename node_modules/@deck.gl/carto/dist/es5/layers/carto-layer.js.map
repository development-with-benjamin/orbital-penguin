{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["defaultProps","MVTLayer","data","credentials","onDataLoad","type","value","tilejson","compare","onDataError","optional","CartoLayer","state","changeFlags","props","dataChanged","_updateData","updateTileJSON","setState","Error","info","pickingEvent","getSubLayers","mvtLayer","onHover","updateTriggers","getSubLayerProps","id","length","CompositeLayer","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;AAEA,IAAMA,YAAY,mCACbC,oBAASD,YADI;AAEhBE,EAAAA,IAAI,EAAE,IAFU;AAGhBC,EAAAA,WAAW,EAAE,IAHG;AAIhBC,EAAAA,UAAU,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAC,QAAQ,EAAI,CAAE,CAAxC;AAA0CC,IAAAA,OAAO,EAAE;AAAnD,GAJI;AAKhBC,EAAAA,WAAW,EAAE;AAACJ,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,IAA1B;AAAgCE,IAAAA,OAAO,EAAE,KAAzC;AAAgDE,IAAAA,QAAQ,EAAE;AAA1D;AALG,EAAlB;;IAQqBC,U;;;;;;;;;;;;sCACD;AAChB,WAAKC,KAAL,GAAa;AACXL,QAAAA,QAAQ,EAAE;AADC,OAAb;AAGD;;;sCAM0B;AAAA,UAAdM,WAAc,QAAdA,WAAc;AAAA,UAClBX,IADkB,GACV,KAAKY,KADK,CAClBZ,IADkB;;AAEzB,UAAIW,WAAW,CAACE,WAAZ,IAA2Bb,IAA/B,EAAqC;AACnC,aAAKc,WAAL;AACD;AACF;;;;;;;;;;;;uBAI0B,KAAKC,cAAL,E;;;AAAjBV,gBAAAA,Q;AACN,qBAAKW,QAAL,CAAc;AAACX,kBAAAA,QAAQ,EAARA;AAAD,iBAAd;AACA,qBAAKO,KAAL,CAAWV,UAAX,CAAsBG,QAAtB;;;;;;;;qBAEI,KAAKO,KAAL,CAAWL,W;;;;;AACb,qBAAKK,KAAL,CAAWL,WAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAQE,IAAIU,KAAJ,CAAU,+DAAV,C;;;;;;;;;;;;;;;;;;4BAGAC,I,EAAMC,Y,EAAc;AAAA,+BACP,KAAKC,YAAL,EADO;AAAA;AAAA,UACnBC,QADmB;;AAE1B,aAAOA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiBJ,IAAjB,EAAuBC,YAAvB,CAAH,6GAAwDD,IAAxD,EAA8DC,YAA9D,CAAf;AACD;;;mCAEc;AACb,UAAI,CAAC,KAAKT,KAAL,CAAWL,QAAhB,EAA0B,OAAO,IAAP;AADb,UAGNkB,cAHM,GAGY,KAAKX,KAHjB,CAGNW,cAHM;AAKb,aAAO,IAAIxB,mBAAJ,CACL,KAAKa,KADA,EAEL,KAAKY,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,KADgB;AAEpBzB,QAAAA,IAAI,EAAE,KAAKU,KAAL,CAAWL,QAFG;AAGpBkB,QAAAA,cAAc,EAAdA;AAHoB,OAAtB,CAFK,CAAP;AAQD;;;wBA/Cc;AACb,aAAO,KAAKH,YAAL,GAAoBM,MAApB,GAA6B,CAA7B,mGAAP;AACD;;;EATqCC,oB;;;AAyDxClB,UAAU,CAACmB,SAAX,GAAuB,YAAvB;AACAnB,UAAU,CAACX,YAAX,GAA0BA,YAA1B","sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\nconst defaultProps = {\n  ...MVTLayer.defaultProps,\n  data: null,\n  credentials: null,\n  onDataLoad: {type: 'function', value: tilejson => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true}\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tilejson: null\n    };\n  }\n\n  get isLoaded() {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  updateState({changeFlags}) {\n    const {data} = this.props;\n    if (changeFlags.dataChanged && data) {\n      this._updateData();\n    }\n  }\n\n  async _updateData() {\n    try {\n      const tilejson = await this.updateTileJSON();\n      this.setState({tilejson});\n      this.props.onDataLoad(tilejson);\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  async updateTileJSON() {\n    throw new Error('You must use one of the specific carto layers: BQ or SQL type');\n  }\n\n  onHover(info, pickingEvent) {\n    const [mvtLayer] = this.getSubLayers();\n    return mvtLayer ? mvtLayer.onHover(info, pickingEvent) : super.onHover(info, pickingEvent);\n  }\n\n  renderLayers() {\n    if (!this.state.tilejson) return null;\n\n    const {updateTriggers} = this.props;\n\n    return new MVTLayer(\n      this.props,\n      this.getSubLayerProps({\n        id: 'mvt',\n        data: this.state.tilejson,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}