"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTileJSON = getTileJSON;
exports.CONNECTIONS = exports.MAP_TYPES = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _config = require("../config");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DEFAULT_USER_COMPONENT_IN_URL = '{user}';
var DEFAULT_REGION_COMPONENT_IN_URL = '{region}';
var MAP_TYPES = {
  SQL: 'sql',
  TABLE: 'table',
  TILESET: 'tileset'
};
exports.MAP_TYPES = MAP_TYPES;
var CONNECTIONS = {
  BIGQUERY: 'bigquery',
  CARTO: 'carto'
};
exports.CONNECTIONS = CONNECTIONS;

function getTileJSON(_x) {
  return _getTileJSON.apply(this, arguments);
}

function _getTileJSON() {
  _getTileJSON = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(_ref) {
    var connection, type, source, mapConfig, credentials, creds, url, layergroup;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            connection = _ref.connection, type = _ref.type, source = _ref.source, mapConfig = _ref.mapConfig, credentials = _ref.credentials;
            creds = _objectSpread(_objectSpread({}, (0, _config.getDefaultCredentials)()), credentials);
            _context.t0 = (0, _config.getMapsVersion)(creds);
            _context.next = _context.t0 === 'v1' ? 5 : _context.t0 === 'v2' ? 10 : 14;
            break;

          case 5:
            url = buildURL({
              mapConfig: mapConfig,
              credentials: creds
            });
            _context.next = 8;
            return request({
              url: url,
              credentials: creds
            });

          case 8:
            layergroup = _context.sent;
            return _context.abrupt("return", layergroup.metadata.tilejson.vector);

          case 10:
            url = buildURL({
              connection: connection,
              type: type,
              source: source,
              credentials: creds
            });
            _context.next = 13;
            return request({
              url: url,
              credentials: creds
            });

          case 13:
            return _context.abrupt("return", _context.sent);

          case 14:
            throw new Error('Invalid maps API version. It shoud be v1 or v2');

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getTileJSON.apply(this, arguments);
}

function request(_x2) {
  return _request.apply(this, arguments);
}

function _request() {
  _request = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(_ref2) {
    var url, credentials, response, json;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            url = _ref2.url, credentials = _ref2.credentials;
            _context2.prev = 1;
            _context2.next = 4;
            return fetch(url, {
              headers: {
                Accept: 'application/json'
              }
            });

          case 4:
            response = _context2.sent;
            _context2.next = 10;
            break;

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](1);
            throw new Error("Failed to connect to Maps API: ".concat(_context2.t0));

          case 10:
            _context2.next = 12;
            return response.json();

          case 12:
            json = _context2.sent;

            if (!response.ok) {
              dealWithError({
                response: response,
                json: json,
                credentials: credentials
              });
            }

            return _context2.abrupt("return", json);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 7]]);
  }));
  return _request.apply(this, arguments);
}

function dealWithError(_ref3) {
  var response = _ref3.response,
      json = _ref3.json,
      credentials = _ref3.credentials;

  switch (response.status) {
    case 401:
      throw new Error("Unauthorized access to Maps API: invalid combination of user ('".concat(credentials.username, "') and apiKey ('").concat(credentials.apiKey, "')"));

    case 403:
      throw new Error("Unauthorized access to dataset: the provided apiKey('".concat(credentials.apiKey, "') doesn't provide access to the requested data"));

    default:
      var e = (0, _config.getMapsVersion)() === 'v1' ? JSON.stringify(json.errors) : json.error;
      throw new Error(e);
  }
}

function buildURL(_ref4) {
  var connection = _ref4.connection,
      type = _ref4.type,
      source = _ref4.source,
      mapConfig = _ref4.mapConfig,
      credentials = _ref4.credentials;
  var encodedApiKey = encodeParameter('api_key', credentials.apiKey);
  var encodedClient = encodeParameter('client', "deck-gl-carto");
  var parameters = [encodedApiKey, encodedClient];

  if (mapConfig) {
    var cfg = JSON.stringify(mapConfig);
    return "".concat(mapsUrl(credentials), "?").concat(parameters.join('&'), "&").concat(encodeParameter('config', cfg));
  }

  var url = "".concat(mapsUrl(credentials), "/").concat(connection, "/").concat(type, "?");
  url += "".concat(encodeParameter('source', source), "&format=tilejson&").concat(parameters.join('&'));
  return url;
}

function mapsUrl(credentials) {
  return credentials.mapsUrl.replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username).replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);
}

function encodeParameter(name, value) {
  return "".concat(name, "=").concat(encodeURIComponent(value));
}
//# sourceMappingURL=maps-api-client.js.map