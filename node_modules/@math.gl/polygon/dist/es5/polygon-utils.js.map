{"version":3,"sources":["../../src/polygon-utils.js"],"names":["WINDING","CLOCKWISE","COUNTER_CLOCKWISE","modifyPolygonWindingDirection","points","direction","options","windingDirection","getPolygonWindingDirection","reversePolygon","Math","sign","getPolygonSignedArea","area","forEachSegmentInPolygon","p1x","p1y","p2x","p2y","areaCalcCallback","visitor","start","end","length","size","isClosed","numPoints","i","endPointIndex","isClosedEx","numSwaps","floor","b1","b2","j","tmp","modifyPolygonWindingDirectionPoints","params","currentDirection","getPolygonWindingDirectionPoints","reverse","getPolygonSignedAreaPoints","forEachSegmentInPolygonPoints","p1","p2"],"mappings":"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","sourcesContent":["/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\n\nimport {equals} from '@math.gl/core';\n\n/** @type {typeof import('./polygon-utils').WINDING} */\nexport const WINDING = {\n  CLOCKWISE: 1,\n  COUNTER_CLOCKWISE: -1\n};\n\n/** @type {typeof import('./polygon-utils').modifyPolygonWindingDirection} */\nexport function modifyPolygonWindingDirection(points, direction, options = {}) {\n  const windingDirection = getPolygonWindingDirection(points, options);\n  if (windingDirection !== direction) {\n    reversePolygon(points, options);\n    return true;\n  }\n  return false;\n}\n\n/** @type {typeof import('./polygon-utils').getPolygonWindingDirection} */\nexport function getPolygonWindingDirection(points, options = {}) {\n  return Math.sign(getPolygonSignedArea(points, options));\n}\n\n/** @type {typeof import('./polygon-utils').getPolygonSignedArea} */\nexport function getPolygonSignedArea(points, options = {}) {\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  let area = 0;\n  forEachSegmentInPolygon(\n    points,\n    (p1x, p1y, p2x, p2y) => {\n      area += areaCalcCallback(p1x, p1y, p2x, p2y);\n    },\n    options\n  );\n\n  return area / 2;\n}\n\n/** @type {typeof import('./polygon-utils').forEachSegmentInPolygon} */\nexport function forEachSegmentInPolygon(points, visitor, options = {}) {\n  const {start = 0, end = points.length, size = 2, isClosed} = options;\n\n  const numPoints = (end - start) / size;\n  for (let i = 0; i < numPoints - 1; ++i) {\n    visitor(\n      points[start + i * size],\n      points[start + i * size + 1],\n      points[start + (i + 1) * size],\n      points[start + (i + 1) * size + 1],\n      i,\n      i + 1\n    );\n  }\n\n  const endPointIndex = start + (numPoints - 1) * size;\n  const isClosedEx =\n    isClosed ||\n    (equals(points[start], points[endPointIndex]) &&\n      equals(points[start + 1], points[endPointIndex + 1]));\n\n  if (!isClosedEx) {\n    visitor(\n      points[endPointIndex],\n      points[endPointIndex + 1],\n      points[start],\n      points[start + 1],\n      numPoints - 1,\n      0\n    );\n  }\n}\n\nfunction reversePolygon(points, options) {\n  const {start = 0, end = points.length, size = 2} = options;\n\n  const numPoints = (end - start) / size;\n  const numSwaps = Math.floor(numPoints / 2);\n  for (let i = 0; i < numSwaps; ++i) {\n    const b1 = start + i * size;\n    const b2 = start + (numPoints - 1 - i) * size;\n    for (let j = 0; j < size; ++j) {\n      const tmp = points[b1 + j];\n      points[b1 + j] = points[b2 + j];\n      points[b2 + j] = tmp;\n    }\n  }\n}\n\n/** @type {typeof import('./polygon-utils').modifyPolygonWindingDirectionPoints} */\nexport function modifyPolygonWindingDirectionPoints(points, direction, params = {}) {\n  const currentDirection = getPolygonWindingDirectionPoints(points, params);\n  if (currentDirection !== direction) {\n    points.reverse();\n    return true;\n  }\n  return false;\n}\n\n/** @type {typeof import('./polygon-utils').getPolygonWindingDirectionPoints} */\nexport function getPolygonWindingDirectionPoints(points, params = {}) {\n  return Math.sign(getPolygonSignedAreaPoints(points, params));\n}\n\n/** @type {typeof import('./polygon-utils').getPolygonSignedAreaPoints} */\nexport function getPolygonSignedAreaPoints(points, params = {}) {\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  let area = 0;\n  forEachSegmentInPolygonPoints(\n    points,\n    (p1, p2) => {\n      area += areaCalcCallback(p1[0], p1[1], p2[0], p2[1]);\n    },\n    params\n  );\n  return area / 2;\n}\n\n/** @type {typeof import('./polygon-utils').forEachSegmentInPolygonPoints} */\nexport function forEachSegmentInPolygonPoints(points, visitor, params = {}) {\n  const {start = 0, end = points.length, isClosed} = params;\n  for (let i = start; i < end - 1; ++i) {\n    visitor(points[i], points[i + 1], i, i + 1);\n  }\n\n  const isClosedEx = isClosed || equals(points[end - 1], points[0]);\n  if (!isClosedEx) {\n    visitor(points[end - 1], points[0], end - 1, 0);\n  }\n}\n\nfunction areaCalcCallback(p1x, p1y, p2x, p2y) {\n  // the \"cancelling\" cross-products: (p1.x + p2.x) * (p1.y - p2.y)\n  return (p1x + p2x) * (p1y - p2y);\n}\n"],"file":"polygon-utils.js"}