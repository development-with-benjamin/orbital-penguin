import { equals } from '@math.gl/core';
export var WINDING = {
  CLOCKWISE: 1,
  COUNTER_CLOCKWISE: -1
};
export function modifyPolygonWindingDirection(points, direction) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var windingDirection = getPolygonWindingDirection(points, options);

  if (windingDirection !== direction) {
    reversePolygon(points, options);
    return true;
  }

  return false;
}
export function getPolygonWindingDirection(points) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Math.sign(getPolygonSignedArea(points, options));
}
export function getPolygonSignedArea(points) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var area = 0;
  forEachSegmentInPolygon(points, function (p1x, p1y, p2x, p2y) {
    area += areaCalcCallback(p1x, p1y, p2x, p2y);
  }, options);
  return area / 2;
}
export function forEachSegmentInPolygon(points, visitor) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$start = options.start,
      start = _options$start === void 0 ? 0 : _options$start,
      _options$end = options.end,
      end = _options$end === void 0 ? points.length : _options$end,
      _options$size = options.size,
      size = _options$size === void 0 ? 2 : _options$size,
      isClosed = options.isClosed;
  var numPoints = (end - start) / size;

  for (var i = 0; i < numPoints - 1; ++i) {
    visitor(points[start + i * size], points[start + i * size + 1], points[start + (i + 1) * size], points[start + (i + 1) * size + 1], i, i + 1);
  }

  var endPointIndex = start + (numPoints - 1) * size;
  var isClosedEx = isClosed || equals(points[start], points[endPointIndex]) && equals(points[start + 1], points[endPointIndex + 1]);

  if (!isClosedEx) {
    visitor(points[endPointIndex], points[endPointIndex + 1], points[start], points[start + 1], numPoints - 1, 0);
  }
}

function reversePolygon(points, options) {
  var _options$start2 = options.start,
      start = _options$start2 === void 0 ? 0 : _options$start2,
      _options$end2 = options.end,
      end = _options$end2 === void 0 ? points.length : _options$end2,
      _options$size2 = options.size,
      size = _options$size2 === void 0 ? 2 : _options$size2;
  var numPoints = (end - start) / size;
  var numSwaps = Math.floor(numPoints / 2);

  for (var i = 0; i < numSwaps; ++i) {
    var b1 = start + i * size;
    var b2 = start + (numPoints - 1 - i) * size;

    for (var j = 0; j < size; ++j) {
      var tmp = points[b1 + j];
      points[b1 + j] = points[b2 + j];
      points[b2 + j] = tmp;
    }
  }
}

export function modifyPolygonWindingDirectionPoints(points, direction) {
  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var currentDirection = getPolygonWindingDirectionPoints(points, params);

  if (currentDirection !== direction) {
    points.reverse();
    return true;
  }

  return false;
}
export function getPolygonWindingDirectionPoints(points) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Math.sign(getPolygonSignedAreaPoints(points, params));
}
export function getPolygonSignedAreaPoints(points) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var area = 0;
  forEachSegmentInPolygonPoints(points, function (p1, p2) {
    area += areaCalcCallback(p1[0], p1[1], p2[0], p2[1]);
  }, params);
  return area / 2;
}
export function forEachSegmentInPolygonPoints(points, visitor) {
  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _params$start = params.start,
      start = _params$start === void 0 ? 0 : _params$start,
      _params$end = params.end,
      end = _params$end === void 0 ? points.length : _params$end,
      isClosed = params.isClosed;

  for (var i = start; i < end - 1; ++i) {
    visitor(points[i], points[i + 1], i, i + 1);
  }

  var isClosedEx = isClosed || equals(points[end - 1], points[0]);

  if (!isClosedEx) {
    visitor(points[end - 1], points[0], end - 1, 0);
  }
}

function areaCalcCallback(p1x, p1y, p2x, p2y) {
  return (p1x + p2x) * (p1y - p2y);
}
//# sourceMappingURL=polygon-utils.js.map