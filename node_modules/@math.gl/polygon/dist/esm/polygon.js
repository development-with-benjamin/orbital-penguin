import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { isArray } from '@math.gl/core';
import { getPolygonSignedArea, forEachSegmentInPolygon, modifyPolygonWindingDirection, getPolygonSignedAreaPoints, forEachSegmentInPolygonPoints, modifyPolygonWindingDirectionPoints } from './polygon-utils';

var Polygon = function () {
  function Polygon(points) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Polygon);

    this.points = points;
    this.isFlatArray = !isArray(points[0]);
    this.options = {
      start: options.start || 0,
      end: options.end || points.length,
      size: options.size || 2,
      isClosed: options.isClosed
    };
    Object.freeze(this);
  }

  _createClass(Polygon, [{
    key: "getSignedArea",
    value: function getSignedArea() {
      if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);
      return getPolygonSignedAreaPoints(this.points, this.options);
    }
  }, {
    key: "getArea",
    value: function getArea() {
      return Math.abs(this.getSignedArea());
    }
  }, {
    key: "getWindingDirection",
    value: function getWindingDirection() {
      return Math.sign(this.getSignedArea());
    }
  }, {
    key: "forEachSegment",
    value: function forEachSegment(visitor) {
      if (this.isFlatArray) {
        forEachSegmentInPolygon(this.points, function (x1, y1, x2, y2, i1, i2) {
          visitor([x1, y1], [x2, y2], i1, i2);
        }, this.options);
      } else {
        forEachSegmentInPolygonPoints(this.points, visitor, this.options);
      }
    }
  }, {
    key: "modifyWindingDirection",
    value: function modifyWindingDirection(direction) {
      if (this.isFlatArray) {
        return modifyPolygonWindingDirection(this.points, direction, this.options);
      }

      return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);
    }
  }]);

  return Polygon;
}();

export { Polygon as default };
//# sourceMappingURL=polygon.js.map