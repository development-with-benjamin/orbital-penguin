{"version":3,"sources":["../../../../src/lib/worker-utils/worker-farm.js"],"names":["WorkerPool","DEFAULT_MAX_CONCURRENCY","WorkerFarm","isSupported","Worker","constructor","maxConcurrency","onMessage","onDebug","reuseWorkers","workerPools","Map","setProps","props","destroy","forEach","workerPool","process","workerSource","workerName","data","_getWorkerPool","get","source","name","onWorkerMessage","bind","set","worker","resolve","reject","type","result","message"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,eAAvB;AAEA,MAAMC,uBAAuB,GAAG,CAAhC;AAKA,eAAe,MAAMC,UAAN,CAAiB;AAC9B,SAAOC,WAAP,GAAqB;AACnB,WAAO,OAAOC,MAAP,KAAkB,WAAzB;AACD;;AAEDC,EAAAA,WAAW,CAAC;AACVC,IAAAA,cAAc,GAAGL,uBADP;AAEVM,IAAAA,SAAS,GAAG,IAFF;AAGVC,IAAAA,OAAO,GAAG,MAAM,CAAE,CAHR;AAIVC,IAAAA,YAAY,GAAG;AAJL,GAAD,EAKR;AACD,SAAKH,cAAL,GAAsBA,cAAtB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACA,SAAKF,YAAL,GAAoBA,YAApB;AACD;;AAEDG,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,QAAI,oBAAoBA,KAAxB,EAA+B;AAC7B,WAAKP,cAAL,GAAsBO,KAAK,CAACP,cAA5B;AACD;;AAED,QAAI,aAAaO,KAAjB,EAAwB;AACtB,WAAKL,OAAL,GAAeK,KAAK,CAACL,OAArB;AACD;;AAED,QAAI,kBAAkBK,KAAtB,EAA6B;AAC3B,WAAKJ,YAAL,GAAoBI,KAAK,CAACJ,YAA1B;AACD;AACF;;AAEDK,EAAAA,OAAO,GAAG;AACR,SAAKJ,WAAL,CAAiBK,OAAjB,CAAyBC,UAAU,IAAIA,UAAU,CAACF,OAAX,EAAvC;AACD;;AAOD,QAAMG,OAAN,CAAcC,YAAd,EAA4BC,UAA5B,EAAwCC,IAAxC,EAA8C;AAC5C,UAAMJ,UAAU,GAAG,KAAKK,cAAL,CAAoBH,YAApB,EAAkCC,UAAlC,CAAnB;;AACA,WAAOH,UAAU,CAACC,OAAX,CAAmBG,IAAnB,CAAP;AACD;;AAIDC,EAAAA,cAAc,CAACH,YAAD,EAAeC,UAAf,EAA2B;AACvC,QAAIH,UAAU,GAAG,KAAKN,WAAL,CAAiBY,GAAjB,CAAqBH,UAArB,CAAjB;;AACA,QAAI,CAACH,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG,IAAIhB,UAAJ,CAAe;AAC1BuB,QAAAA,MAAM,EAAEL,YADkB;AAE1BM,QAAAA,IAAI,EAAEL,UAFoB;AAG1BZ,QAAAA,SAAS,EAAEkB,eAAe,CAACC,IAAhB,CAAqB,IAArB,EAA2B,KAAKnB,SAAhC,CAHe;AAI1BD,QAAAA,cAAc,EAAE,KAAKA,cAJK;AAK1BE,QAAAA,OAAO,EAAE,KAAKA,OALY;AAM1BC,QAAAA,YAAY,EAAE,KAAKA;AANO,OAAf,CAAb;AAQA,WAAKC,WAAL,CAAiBiB,GAAjB,CAAqBR,UAArB,EAAiCH,UAAjC;AACD;;AACD,WAAOA,UAAP;AACD;;AA9D6B;;AAiEhC,SAASS,eAAT,CAAyBlB,SAAzB,EAAoC;AAACqB,EAAAA,MAAD;AAASR,EAAAA,IAAT;AAAeS,EAAAA,OAAf;AAAwBC,EAAAA;AAAxB,CAApC,EAAqE;AACnE,MAAIvB,SAAJ,EAAe;AACbA,IAAAA,SAAS,CAAC;AAACqB,MAAAA,MAAD;AAASR,MAAAA,IAAT;AAAeS,MAAAA,OAAf;AAAwBC,MAAAA;AAAxB,KAAD,CAAT;AACA;AACD;;AAED,UAAQV,IAAI,CAACW,IAAb;AACE,SAAK,MAAL;AACEF,MAAAA,OAAO,CAACT,IAAI,CAACY,MAAN,CAAP;AACA;;AAEF,SAAK,OAAL;AACEF,MAAAA,MAAM,CAACV,IAAI,CAACa,OAAN,CAAN;AACA;;AAEF;AATF;AAWD","sourcesContent":["import WorkerPool from './worker-pool';\n\nconst DEFAULT_MAX_CONCURRENCY = 5;\n\n/**\n * Process multiple data messages with a \"farm\" of different workers (in worker pools)\n */\nexport default class WorkerFarm {\n  static isSupported() {\n    return typeof Worker !== 'undefined';\n  }\n\n  constructor({\n    maxConcurrency = DEFAULT_MAX_CONCURRENCY,\n    onMessage = null,\n    onDebug = () => {},\n    reuseWorkers = true\n  }) {\n    this.maxConcurrency = maxConcurrency;\n    this.onMessage = onMessage;\n    this.onDebug = onDebug;\n    this.workerPools = new Map();\n    this.reuseWorkers = reuseWorkers;\n  }\n\n  setProps(props) {\n    if ('maxConcurrency' in props) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n\n    if ('onDebug' in props) {\n      this.onDebug = props.onDebug;\n    }\n\n    if ('reuseWorkers' in props) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n  }\n\n  destroy() {\n    this.workerPools.forEach(workerPool => workerPool.destroy());\n  }\n\n  /**\n   * Process binary data in a worker\n   * @param {any} data - data (containing binary typed arrays) to be transferred to worker\n   * @returns a Promise with data containing typed arrays transferred back from work\n   */\n  async process(workerSource, workerName, data) {\n    const workerPool = this._getWorkerPool(workerSource, workerName);\n    return workerPool.process(data);\n  }\n\n  // PRIVATE\n\n  _getWorkerPool(workerSource, workerName) {\n    let workerPool = this.workerPools.get(workerName);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        source: workerSource,\n        name: workerName,\n        onMessage: onWorkerMessage.bind(null, this.onMessage),\n        maxConcurrency: this.maxConcurrency,\n        onDebug: this.onDebug,\n        reuseWorkers: this.reuseWorkers\n      });\n      this.workerPools.set(workerName, workerPool);\n    }\n    return workerPool;\n  }\n}\n\nfunction onWorkerMessage(onMessage, {worker, data, resolve, reject}) {\n  if (onMessage) {\n    onMessage({worker, data, resolve, reject});\n    return;\n  }\n\n  switch (data.type) {\n    case 'done':\n      resolve(data.result);\n      break;\n\n    case 'error':\n      reject(data.message);\n      break;\n\n    default:\n  }\n}\n"],"file":"worker-farm.js"}