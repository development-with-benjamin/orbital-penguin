{"version":3,"sources":["../../../src/classes/texture.js"],"names":["isWebGL2","assertWebGL2Context","withParameters","log","global","Resource","Buffer","TEXTURE_FORMATS","DATA_FORMAT_CHANNELS","TYPE_SIZES","isFormatSupported","isLinearFilteringSupported","uid","isPowerOfTwo","assert","NPOT_MIN_FILTERS","WebGLBuffer","Texture","gl","opts","format","linearFiltering","supported","props","id","handle","target","textureUnit","undefined","loaded","width","height","depth","type","dataFormat","border","mipmaps","data","Promise","then","resolvedImageData","initialize","Object","assign","pixels","isVideo","HTMLVideoElement","readyState","HAVE_METADATA","_video","addEventListener","recreate","parameters","pixelStore","compressed","_deduceParameters","Number","isFinite","activeTexture","bindTexture","_isNPOT","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","video","lastTime","HAVE_CURRENT_DATA","currentTime","setSubImageData","params","options","_trackDeallocatedMemory","level","offset","dataType","_getDataType","gl2","texImage2D","bindBuffer","entries","levelIndex","levelData","compressedTexImage2D","byteLength","_trackAllocatedMemory","channels","channelSize","x","y","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","error","getParameter","textureFormat","types","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","videoWidth","videoHeight","createTexture","deleteTexture","pname","value","getTexParameter","param","_getNPOTParam","texParameterf","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {global} from 'probe.gl/env';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\nimport {uid, isPowerOfTwo, assert} from '../utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// Polyfill\n// Note (Tarek): Do we really need to support this API?\nconst WebGLBuffer = global.WebGLBuffer || function WebGLBuffer() {};\n\nexport default class Texture extends Resource {\n  static isSupported(gl, opts = {}) {\n    const {format, linearFiltering} = opts;\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n    const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n    // @ts-ignore\n    if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n      this._video = null; // Declare member before the object is sealed\n      data.addEventListener('loadeddata', () => this.initialize(props));\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type, compressed = false, mipmaps = true} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, compressed, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore,\n      compressed\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n    if (isVideo) {\n      this._video = {\n        video: data,\n        parameters,\n        // @ts-ignore\n        lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n      };\n    }\n\n    return this;\n  }\n\n  update() {\n    if (this._video) {\n      const {video, parameters, lastTime} = this._video;\n      // @ts-ignore\n      if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n      this.setSubImageData({\n        data: video,\n        parameters\n      });\n      if (this.mipmaps) {\n        this.generateMipmap();\n      }\n      this._video.lastTime = video.currentTime;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    let gl2;\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          // @ts-ignore\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            // @ts-ignore\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          gl2 = assertWebGL2Context(gl);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          for (const [levelIndex, levelData] of data.entries()) {\n            gl.compressedTexImage2D(\n              target,\n              levelIndex,\n              levelData.format,\n              levelData.width,\n              levelData.height,\n              border,\n              levelData.data\n            );\n          }\n\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        // const gl2 = assertWebGL2Context(this.gl);\n        // @ts-ignore last offset parameter is ignored under WebGL1\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        const gl2 = assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        const gl2 = assertWebGL2Context(this.gl);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n"],"file":"texture.js"}