{"version":3,"sources":["../../../src/lib/transpile-shader.js"],"names":["ES300_REPLACEMENTS","ES300_VERTEX_REPLACEMENTS","ES300_FRAGMENT_REPLACEMENTS","ES100_REPLACEMENTS","ES100_VERTEX_REPLACEMENTS","ES100_FRAGMENT_REPLACEMENTS","FS_OUTPUT_REGEX","transpileShader","source","targetGLSLVersion","isVertex","convertShader","convertFragmentShaderTo100","Error","replacements","pattern","replacement","replace","outputMatch","match","outputName","RegExp"],"mappings":"AAGA,MAAMA,kBAAkB,GAAG,CAEzB,CAAC,6CAAD,EAAgD,mBAAhD,CAFyB,EAIzB,CAAC,uCAAD,EAA0C,aAA1C,CAJyB,EAKzB,CAAC,oCAAD,EAAuC,UAAvC,CALyB,CAA3B;AAQA,MAAMC,yBAAyB,GAAG,CAChC,GAAGD,kBAD6B,EAGhC,CAAC,+BAAD,EAAkC,OAAlC,CAHgC,EAKhC,CAAC,6BAAD,EAAgC,QAAhC,CALgC,CAAlC;AASA,MAAME,2BAA2B,GAAG,CAClC,GAAGF,kBAD+B,EAGlC,CAAC,6BAAD,EAAgC,OAAhC,CAHkC,CAApC;AAMA,MAAMG,kBAAkB,GAAG,CACzB,CAAC,4BAAD,EAA+B,cAA/B,CADyB,EAIzB,CAAC,iCAAD,EAAoC,kBAApC,CAJyB,EAQzB,CAAC,cAAD,EAAiB,YAAjB,CARyB,EASzB,CAAC,iBAAD,EAAoB,kBAApB,CATyB,CAA3B;AAYA,MAAMC,yBAAyB,GAAG,CAChC,GAAGD,kBAD6B,EAEhC,CAAC,wBAAD,EAA2B,cAA3B,CAFgC,EAGhC,CAAC,yBAAD,EAA4B,YAA5B,CAHgC,CAAlC;AAMA,MAAME,2BAA2B,GAAG,CAClC,GAAGF,kBAD+B,EAGlC,CAAC,mBAAD,EAAsB,UAAtB,CAHkC,CAApC;AAMA,MAAMG,eAAe,GAAG,4CAAxB;AAKA,eAAe,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,iBAAjC,EAAoDC,QAApD,EAA8D;AAC3E,UAAQD,iBAAR;AACE,SAAK,GAAL;AACE,aAAOE,aAAa,CAClBH,MADkB,EAElBE,QAAQ,GAAGT,yBAAH,GAA+BC,2BAFrB,CAApB;;AAIF,SAAK,GAAL;AACE,aAAOQ,QAAQ,GACXC,aAAa,CAACH,MAAD,EAASJ,yBAAT,CADF,GAEXQ,0BAA0B,CAACJ,MAAD,CAF9B;;AAGF;AACE,YAAM,IAAIK,KAAJ,gCAAkCJ,iBAAlC,EAAN;AAXJ;AAaD;;AAED,SAASE,aAAT,CAAuBH,MAAvB,EAA+BM,YAA/B,EAA6C;AAC3C,OAAK,MAAM,CAACC,OAAD,EAAUC,WAAV,CAAX,IAAqCF,YAArC,EAAmD;AACjDN,IAAAA,MAAM,GAAGA,MAAM,CAACS,OAAP,CAAeF,OAAf,EAAwBC,WAAxB,CAAT;AACD;;AACD,SAAOR,MAAP;AACD;;AAED,SAASI,0BAAT,CAAoCJ,MAApC,EAA4C;AAE1CA,EAAAA,MAAM,GAAGG,aAAa,CAACH,MAAD,EAASH,2BAAT,CAAtB;AAEA,QAAMa,WAAW,GAAGV,MAAM,CAACW,KAAP,CAAab,eAAb,CAApB;;AACA,MAAIY,WAAJ,EAAiB;AACf,UAAME,UAAU,GAAGF,WAAW,CAAC,CAAD,CAA9B;AACAV,IAAAA,MAAM,GAAGA,MAAM,CACZS,OADM,CACEX,eADF,EACmB,EADnB,EAENW,OAFM,CAEE,IAAII,MAAJ,cAAiBD,UAAjB,UAAkC,GAAlC,CAFF,EAE0C,cAF1C,CAAT;AAGD;;AAED,SAAOZ,MAAP;AACD","sourcesContent":["// TRANSPILATION TABLES\n\n/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */\nconst ES300_REPLACEMENTS = [\n  // Fix poorly formatted version directive\n  [/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n'],\n  // The individual `texture...()` functions were replaced with `texture()` overloads\n  [/\\btexture(2D|2DProj|Cube)Lod(EXT)?\\(/g, 'textureLod('],\n  [/\\btexture(2D|2DProj|Cube)(EXT)?\\(/g, 'texture(']\n];\n\nconst ES300_VERTEX_REPLACEMENTS = [\n  ...ES300_REPLACEMENTS,\n  // `attribute` keyword replaced with `in`\n  [/^[ \\t]*attribute[ \\t]+(.+;)/gm, 'in $1'],\n  // `varying` keyword replaced with `out`\n  [/^[ \\t]*varying[ \\t]+(.+;)/gm, 'out $1']\n];\n\n/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */\nconst ES300_FRAGMENT_REPLACEMENTS = [\n  ...ES300_REPLACEMENTS,\n  // `varying` keyword replaced with `in`\n  [/^[ \\t]*varying[ \\t]+(.+;)/gm, 'in $1']\n];\n\nconst ES100_REPLACEMENTS = [\n  [/^#version[ \\t]+300[ \\t]+es/, '#version 100'],\n\n  // In GLSL 1.00 ES these functions are provided by an extension\n  [/\\btexture(2D|2DProj|Cube)Lod\\(/g, 'texture$1LodEXT('],\n\n  // Overloads in GLSL 3.00 map to individual functions. Note that we cannot\n  // differentiate 2D,2DProj,Cube without type analysis so we choose the most common variant.\n  [/\\btexture\\(/g, 'texture2D('],\n  [/\\btextureLod\\(/g, 'texture2DLodEXT(']\n];\n\nconst ES100_VERTEX_REPLACEMENTS = [\n  ...ES100_REPLACEMENTS,\n  [/^[ \\t]*in[ \\t]+(.+;)/gm, 'attribute $1'],\n  [/^[ \\t]*out[ \\t]+(.+;)/gm, 'varying $1']\n];\n\nconst ES100_FRAGMENT_REPLACEMENTS = [\n  ...ES100_REPLACEMENTS,\n  // Replace `in` with `varying`\n  [/^[ \\t]*in[ \\t]+/gm, 'varying ']\n];\n\nconst FS_OUTPUT_REGEX = /^[ \\t]*out[ \\t]+vec4[ \\t]+(\\w+)[ \\t]*;\\s+/m;\n\n// Transpiles shader source code to target GLSL version\n// Note: We always run transpiler even if same version e.g. 3.00 => 3.00\n// RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md\nexport default function transpileShader(source, targetGLSLVersion, isVertex) {\n  switch (targetGLSLVersion) {\n    case 300:\n      return convertShader(\n        source,\n        isVertex ? ES300_VERTEX_REPLACEMENTS : ES300_FRAGMENT_REPLACEMENTS\n      );\n    case 100:\n      return isVertex\n        ? convertShader(source, ES100_VERTEX_REPLACEMENTS)\n        : convertFragmentShaderTo100(source);\n    default:\n      throw new Error(`unknown GLSL version ${targetGLSLVersion}`);\n  }\n}\n\nfunction convertShader(source, replacements) {\n  for (const [pattern, replacement] of replacements) {\n    source = source.replace(pattern, replacement);\n  }\n  return source;\n}\n\nfunction convertFragmentShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  source = convertShader(source, ES100_FRAGMENT_REPLACEMENTS);\n\n  const outputMatch = source.match(FS_OUTPUT_REGEX);\n  if (outputMatch) {\n    const outputName = outputMatch[1];\n    source = source\n      .replace(FS_OUTPUT_REGEX, '')\n      .replace(new RegExp(`\\\\b${outputName}\\\\b`, 'g'), 'gl_FragColor');\n  }\n\n  return source;\n}\n"],"file":"transpile-shader.js"}